{{ define "Update" }}{{ $camelName := .Name | toCamel | untitle }}
{{- $constructor := printf "New%sSQL" (.Name | toCamel | title) -}}
type {{ $camelName }}UpdateSQL struct {
	{{ $camelName }}SQL
	setMap	sqlla.SetMap
	Columns []string
}

func (q {{ $camelName }}SQL) Update() {{ $camelName }}UpdateSQL {
	return {{ $camelName }}UpdateSQL{
		{{ $camelName }}SQL: q,
		setMap: sqlla.SetMap{},
	}
}

{{ range .Columns }}{{ template "UpdateColumn" . }}{{ end }}
func (q {{ $camelName }}UpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = {{ .StructName }}{}
	if t, ok := s.({{ $camelName }}DefaultUpdateHooker); ok {
		q, err = t.DefaultUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	{{- if eq (dialect) "mysql" }}
	setColumns, svs, err := q.setMap.ToUpdateSql()
	{{- end }}
	{{- if eq (dialect) "postgresql" }}
	setColumns, offset, svs, err := q.setMap.ToUpdateSqlPg(0)
	{{- end }}
	if err != nil {
		return "", []interface{}{}, err
	}
	{{- if eq (dialect) "mysql" }}
	wheres, wvs, err := q.where.ToSql()
	{{- end }}
	{{- if eq (dialect) "postgresql" }}
	wheres, _, wvs, err := q.where.ToSqlPg(offset)
	{{- end }}
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "UPDATE " + {{ cquoteby .TableName }} + " SET" + setColumns
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", append(svs, wvs...), nil
}

{{- if eq (dialect) "postgresql" }}
func (q {{ $camelName }}UpdateSQL) ToSqlWithReturning() (string, []interface{}, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	query = strings.TrimSuffix(query, ";")
	query += " RETURNING " + strings.Join({{ $camelName }}AllColumns, ", ")
	return query + ";", args, nil
}

func (s {{ .StructName }}) Update() {{ $camelName }}UpdateSQL {
	return {{ $constructor }}().Update().Where{{ .PkColumn.Name | toCamel | title }}(s.{{ .PkColumn.FieldName }})
}

func (q {{ $camelName }}UpdateSQL) Exec(db sqlla.DB) ([]{{ .StructName }}, error) {
	return q.ExecContext(context.Background(), db)
}

func (q {{ $camelName }}UpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]{{ .StructName }}, error) {
	query, args, err := q.ToSqlWithReturning()
	if err != nil {
		return nil, err
	}
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	results := make([]{{ .StructName }}, 0, 1)
	defer rows.Close()
	sel := {{ $constructor }}().Select()
	for rows.Next() {
		result, err := sel.Scan(rows)
		if err != nil {
			return nil, err
		}
		results = append(results, result)
	}

	return results, nil
}
{{- end }}
{{- if eq (dialect) "mysql" }}
{{- if .HasPk }}
func (s {{ .StructName }}) Update() {{ $camelName }}UpdateSQL {
	return {{ $constructor }}().Update().Where{{ .PkColumn.Name | toCamel | title }}(s.{{ .PkColumn.FieldName }})
}

func (q {{ $camelName }}UpdateSQL) Exec(db sqlla.DB) ([]{{ .StructName }}, error) {
	return q.ExecContext(context.Background(), db)
}

func (q {{ $camelName }}UpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]{{ .StructName }}, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	_, err = db.ExecContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	qq := q.{{ $camelName }}SQL

	return qq.Select().AllContext(ctx, db)
}
{{- else }}
func (q {{ $camelName }}UpdateSQL) Exec(db sqlla.DB) (sql.Result, error) {
	return q.ExecContext(context.Background(), db)
}

func (q {{ $camelName }}UpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
{{- end }}
{{- end }}

type {{ $camelName }}DefaultUpdateHooker interface {
	DefaultUpdateHook({{ $camelName }}UpdateSQL) ({{ $camelName }}UpdateSQL, error)
}
{{ end }}
