{{ define "SelectColumnNullT" }}
{{ $smallTableName := .TableName | toCamel | untitle }}
func (q {{ $smallTableName }}SelectSQL) {{ .MethodName }}(v {{ .TypeName }}, exprs ...sqlla.Operator) {{ $smallTableName }}SelectSQL {
	where := {{ .ExprValue }}{Value: sql.Null[{{ .BaseTypeName }}]{ V: {{ .ExprValueIdentifier }}, Valid: true }, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix({{ cquoteby .Name }})}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}SelectSQL) {{ .MethodName }}IsNull() {{ $smallTableName }}SelectSQL {
	where := {{ .ExprValue }}{Value: sql.Null[{{ .BaseTypeName }}]{ Valid: false }, Op: sqlla.Operators{sqlla.OpEqual}, Column: q.appendColumnPrefix({{ cquoteby .Name }})}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}SelectSQL) {{ .MethodName }}IsNotNull() {{ $smallTableName }}SelectSQL {
	where := {{ .ExprValue }}{Value: sql.Null[{{ .BaseTypeName }}]{ Valid: false }, Op: sqlla.Operators{sqlla.OpNot}, Column: q.appendColumnPrefix({{ cquoteby .Name }})}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}SelectSQL) {{ .MethodName }}In(vs ...{{ .TypeName }}) {{ $smallTableName }}SelectSQL {
	_vs := make([]{{ .BaseTypeName }}, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, {{ .ExprValueIdentifier }})
	}
	where := {{ .ExprMultiValue }}{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix({{ cquoteby .Name }})}
	q.where = append(q.where, where)
	return q
}
{{- end }}
