{{ define "Insert" }}
{{- $camelName := .Name | toCamel | untitle -}}
{{- $constructor := printf "New%sSQL" (.Name | toCamel) -}}
type {{ $camelName }}InsertSQL struct {
	{{ $camelName }}SQL
	setMap	sqlla.SetMap
	Columns []string
}

func (q {{ $camelName }}SQL) Insert() {{ $camelName }}InsertSQL {
	return {{ $camelName }}InsertSQL{
		{{ $camelName }}SQL: q,
		setMap: sqlla.SetMap{},
	}
}

{{ range .Columns }}{{ template "InsertColumn" . }}{{ end }}
func (q {{ $camelName }}InsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.{{ $camelName }}InsertSQLToSql()
	if err != nil {
			return "", []interface{}{}, err
	}
	{{- if and .HasPk (eq (dialect) "postgresql") }}
	return query + " RETURNING " + {{ cquoteby .PkColumn.Name }} + ";", vs, nil
	{{- else }}
	return query + ";", vs, nil
	{{- end }}
}

func (q {{ $camelName }}InsertSQL) {{ $camelName }}InsertSQLToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = {{ .StructName }}{}
	if t, ok := s.({{ $camelName }}DefaultInsertHooker); ok {
		q, err = t.DefaultInsertHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	{{- if eq (dialect) "mysql" }}
	qs, vs, err := q.setMap.ToInsertSql()
	{{- end }}
	{{- if eq (dialect) "postgresql" }}
	qs, _, vs, err := q.setMap.ToInsertSqlPg(0)
	{{- end }}
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "INSERT INTO " + {{ cquoteby .TableName }} + " " + qs

	return query, vs, nil
}

{{ if .HasPk -}}
func (q {{ $camelName }}InsertSQL) Exec(db sqlla.DB) ({{ .StructName }}, error) {
{{- else -}}
func (q {{ $camelName }}InsertSQL) Exec(db sqlla.DB) (sql.Result, error) {
{{- end }}
	query, args, err := q.ToSql()
	if err != nil {
		{{ if .HasPk -}}
		return {{ .StructName }}{}, err
		{{- else }}
		return nil, err
		{{- end }}
	}
	{{- if not .HasPk }}
	result, err := db.Exec(query, args...)
	return result, err
	{{- else }}
	{{- if eq (dialect) "mysql" }}
	result, err := db.Exec(query, args...)
	if err != nil {
		return {{ .StructName }}{}, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return {{ .StructName }}{}, err
	}
	return {{ $constructor }}().Select().PkColumn(id).Single(db)
	{{- end }}
	{{- if eq (dialect) "postgresql" }}
	row := db.QueryRow(query, args...)
	var pk {{ .PkColumn.TypeName }}
	if err := row.Scan(&pk); err != nil {
		return {{ .StructName }}{}, err
	}
	return {{ $constructor }}().Select().{{ .PkColumn.MethodName }}(pk).Single(db)
	{{- end }}
	{{- end }}
}

{{ if .HasPk -}}
func (q {{ $camelName }}InsertSQL) ExecContext(ctx context.Context, db sqlla.DB) ({{ .StructName }}, error) {
{{- else -}}
func (q {{ $camelName }}InsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
{{- end }}
	query, args, err := q.ToSql()
	if err != nil {
		{{ if .HasPk -}}
		return {{ .StructName }}{}, err
		{{- else }}
		return nil, err
		{{- end }}
	}
	{{- if not .HasPk }}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
	{{- else }}
	{{- if eq (dialect) "mysql" }}
	result, err := db.ExecContext(ctx, query, args...)
	if err != nil {
		return {{ .StructName }}{}, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return {{ .StructName }}{}, err
	}
	return {{ $constructor }}().Select().PkColumn(id).SingleContext(ctx, db)
	{{- end }}
	{{- if eq (dialect) "postgresql" }}
	row := db.QueryRowContext(ctx, query, args...)
	var pk {{ .PkColumn.TypeName }}
	if err := row.Scan(&pk); err != nil {
		return {{ .StructName }}{}, err
	}
	return {{ $constructor }}().Select().{{ .PkColumn.MethodName }}(pk).SingleContext(ctx, db)
	{{- end }}
	{{- end }}
}

{{ if .HasPk -}}
func (q {{ $camelName }}InsertSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}
{{- end }}

type {{ $camelName }}DefaultInsertHooker interface {
	DefaultInsertHook({{ $camelName }}InsertSQL) ({{ $camelName }}InsertSQL, error)
}

type {{ $camelName }}InsertSQLToSqler interface {
	{{ $camelName }}InsertSQLToSql() (string, []interface{}, error)
}

type {{ $camelName }}BulkInsertSQL struct {
	insertSQLs []{{ $camelName }}InsertSQL
}

func (q {{ $camelName }}SQL) BulkInsert() *{{ $camelName }}BulkInsertSQL {
	return &{{ $camelName }}BulkInsertSQL{
		insertSQLs: []{{ $camelName }}InsertSQL{},
	}
}

func (q *{{ $camelName }}BulkInsertSQL) Append(iqs ...{{ $camelName }}InsertSQL) {
	q.insertSQLs = append(q.insertSQLs, iqs...)
}

func (q *{{ $camelName }}BulkInsertSQL) {{ $camelName }}InsertSQLToSql() (string, []interface{}, error) {
	if len(q.insertSQLs) == 0 {
		return "", []interface{}{}, fmt.Errorf("sqlla: This {{ $camelName }}BulkInsertSQL{{ "'s" }} InsertSQL was empty")
	}
	iqs := make([]{{ $camelName }}InsertSQL, len(q.insertSQLs))
	copy(iqs, q.insertSQLs)

	var s interface{} = {{ .StructName }}{}
	if t, ok := s.({{ $camelName }}DefaultInsertHooker); ok {
		for i, iq := range iqs {
			var err error
			iq, err = t.DefaultInsertHook(iq)
			if err != nil {
				return "", []interface{}{}, err
			}
			iqs[i] = iq
		}
	}

	sms := make(sqlla.SetMaps, 0, len(q.insertSQLs))
	for _, iq := range q.insertSQLs {
		sms = append(sms, iq.setMap)
	}

	{{ if eq (dialect) "mysql" }}
	query, vs, err := sms.ToInsertSql()
	{{ end -}}
	{{ if eq (dialect) "postgresql" }}
	query, _, vs, err := sms.ToInsertSqlPg(0)
	{{ end -}}
	if err != nil {
	return "", []interface{}{}, err
	}

	return "INSERT INTO " + {{ cquoteby .TableName }} + " " + query, vs, nil
}

func (q *{{ $camelName }}BulkInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.{{ $camelName }}InsertSQLToSql()
	if err != nil {
			return "", []interface{}{}, err
	}
	{{- if and .HasPk (eq (dialect) "postgresql") }}
	return query + " RETURNING " + {{ cquoteby .PkColumn.Name }} + ";", vs, nil
	{{- else }}
	return query + ";", vs, nil
	{{- end }}
}

{{- if and .HasPk (eq (dialect) "postgresql") }}
func (q *{{ $camelName }}BulkInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]{{ .StructName }}, error) {
{{- else }}
func (q *{{ $camelName }}BulkInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
{{- end }}
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	{{- if and .HasPk (eq (dialect) "postgresql") }}
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	pks := make([]{{ .PkColumn.TypeName }}, 0, len(q.insertSQLs))
	for rows.Next() {
		var pk {{ .PkColumn.TypeName }}
		if err := rows.Scan(&pk); err != nil {
			return nil, err
		}
		pks = append(pks, pk)
	}
	return {{ $constructor }}().Select().{{ .PkColumn.MethodName }}In(pks...).AllContext(ctx, db)
	{{- else }}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
	{{- end }}
}

{{- if and .HasPk (eq (dialect) "postgresql") }}
func (q *{{ $camelName }}BulkInsertSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}
{{- end }}

{{- if eq (dialect) "mysql" }}
{{ template "InsertMySQL" . }}
{{- end }}

{{ end }}
