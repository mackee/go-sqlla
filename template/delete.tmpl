{{ define "Delete" }}
{{- $camelName := .Name | toCamel | untitle -}}
{{- $constructor := printf "New%sSQL" (.Name | toCamel | title) -}}
type {{ $camelName }}DeleteSQL struct {
	{{ $camelName }}SQL
}

func (q {{ $camelName }}SQL) Delete() {{ $camelName }}DeleteSQL {
	return {{ $camelName }}DeleteSQL{
		q,
	}
}

{{ range .Columns }}{{ template "DeleteColumn" . }}{{ end }}
func (q {{ $camelName }}DeleteSQL) ToSql() (string, []interface{}, error) {
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	query := "DELETE FROM `{{ .TableName }}`"
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", vs, nil
}

func ( q {{ $camelName }}DeleteSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func ( q {{ $camelName }}DeleteSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}

{{- if .HasPk }}
func (s {{ .StructName }}) Delete(db sqlla.DB) (sql.Result, error) {
	query, args, err := {{ $constructor }}().Delete().{{ .PkColumn.Name | toCamel | title }}(s.{{ .PkColumn.FieldName }}).ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (s {{ .StructName }}) DeleteContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := {{ $constructor }}().Delete().{{ .PkColumn.Name | toCamel | title }}(s.{{ .PkColumn.FieldName }}).ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
{{- end }}
{{ end }}
