{{ define "UpdateColumnNullT" }}{{ $smallTableName := .TableName | toCamel | untitle }}
func (q {{ $smallTableName }}UpdateSQL) Set{{ .MethodName }}(v {{ .TypeParameter }}) {{ $smallTableName }}UpdateSQL {
	q.setMap["`{{ .Name }}`"] = sql.Null[{{ .TypeParameter }}]{ V: v, Valid: true }
	return q
}

func (q {{ $smallTableName }}UpdateSQL) Set{{ .MethodName }}ToNull() {{ $smallTableName }}UpdateSQL {
	q.setMap["`{{ .Name }}`"] = sql.Null[{{ .TypeParameter }}]{ Valid: false }
	return q
}

func (q {{ $smallTableName }}UpdateSQL) Where{{ .MethodName }}(v {{ .TypeParameter }}, exprs ...sqlla.Operator) {{ $smallTableName }}UpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNull[{{ .TypeParameter }}]{Value: sql.Null[{{ .TypeParameter }}]{ V: v, Valid: true }, Op: op, Column: "`{{ .Name }}`"}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}UpdateSQL) Where{{ .MethodName }}IsNull() {{ $smallTableName }}UpdateSQL {
	where := sqlla.ExprNull[{{ .TypeParameter }}]{Value: sql.Null[{{ .TypeParameter }}]{ Valid: false }, Op: sqlla.OpEqual, Column: "`{{ .Name }}`"}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}UpdateSQL) Where{{ .MethodName }}IsNotNull() {{ $smallTableName }}UpdateSQL {
	where := sqlla.ExprNull[{{ .TypeParameter }}]{Value: sql.Null[{{ .TypeParameter }}]{ Valid: false }, Op: sqlla.OpNot, Column: "`{{ .Name }}`"}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}UpdateSQL) Where{{ .MethodName }}In(vs ...{{ .TypeParameter }}) {{ $smallTableName }}UpdateSQL {
	_vs := make([]sql.Null[{{ .TypeParameter }}], 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, sql.Null[{{ .TypeParameter }}]{V: v, Valid: true})
	}
	where := sqlla.ExprMultiValue[sql.Null[{{ .TypeParameter }}]]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`{{ .Name }}`"}
	q.where = append(q.where, where)
	return q
}
{{ end }}
