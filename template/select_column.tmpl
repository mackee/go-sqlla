{{ define "SelectColumn" }}{{ $smallTableName := .TableName | toCamel | Untitle }}
func (q {{ $smallTableName }}SelectSQL) {{ .MethodName }}(v {{ .TypeName }}, exprs ...sqlla.Operator) {{ $smallTableName }}SelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.{{ .ExprTypeName }}{Value: {{ .ExprValueIdentifier }}, Op: op, Column: q.appendColumnPrefix("`{{ .Name }}`")}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}SelectSQL) {{ .MethodName }}In(vs ...{{ .TypeName }}) {{ $smallTableName }}SelectSQL {
{{- if .HasUnderlyingType }}
	_vs := make([]{{ .BaseTypeName }}, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, {{ .BaseTypeName }}(v))
	}
	where := sqlla.{{ .ExprMultiTypeName }}{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`{{ .Name }}`")}
{{- else }}
	where := sqlla.{{ .ExprMultiTypeName }}{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`{{ .Name }}`")}
{{- end }}
	q.where = append(q.where, where)
	return q
}

{{ if .IsPk -}}
func (q {{ $smallTableName }}SelectSQL) PkColumn(pk int64, exprs ...sqlla.Operator) {{ $smallTableName }}SelectSQL {
	v := {{ .TypeName }}(pk)
	return q.{{ .MethodName }}(v, exprs...)
}
{{- end }}

func (q {{ $smallTableName }}SelectSQL) OrderBy{{ .MethodName }}(order sqlla.Order) {{ $smallTableName }}SelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`{{ .Name }}`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}
{{ end }}
