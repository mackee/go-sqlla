{{ define "SelectColumn" }}
{{- $smallTableName := .TableName | toCamel | untitle }}
{{- if .IsNullT }}
{{- template "SelectColumnNullT" . }}
{{- else }}
func (q {{ $smallTableName }}SelectSQL) {{ .MethodName }}(v {{ .TypeName }}, exprs ...sqlla.Operator) {{ $smallTableName }}SelectSQL {
	where := {{ .ExprValue }}{Value: {{ .ExprValueIdentifier }}, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix({{ cquoteby .Name }})}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}SelectSQL) {{ .MethodName }}In(vs ...{{ .TypeName }}) {{ $smallTableName }}SelectSQL {
{{- if .HasUnderlyingType }}
	_vs := make([]{{ .BaseTypeName }}, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, {{ .ExprValueIdentifier }})
	}
	where := {{ .ExprMultiValue }}{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix({{ cquoteby .Name }})}
{{- else }}
	where := {{ .ExprMultiValue }}{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix({{ cquoteby .Name }})}
{{- end }}
	q.where = append(q.where, where)
	return q
}
{{- end }}

{{ if and .IsPk (eq (dialect) "mysql") -}}
func (q {{ $smallTableName }}SelectSQL) PkColumn(pk int64, exprs ...sqlla.Operator) {{ $smallTableName }}SelectSQL {
	v := {{ .TypeName }}(pk)
	return q.{{ .MethodName }}(v, exprs...)
}
{{- end }}

func (q {{ $smallTableName }}SelectSQL) OrderBy{{ .MethodName }}(order sqlla.Order) {{ $smallTableName }}SelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix({{ cquoteby .Name }}))
	return q
}
{{ end }}
