// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla. DO NOT EDIT.
package example

import (
	"context"
	"database/sql"
	"fmt"
	"time"

	"github.com/mackee/go-sqlla/v2"
)

func (g *Group) Leader(ctx context.Context, db sqlla.DB) (*User, error) {
	row, err := NewUserSQL().Select().ID(g.LeaderUserID).SingleContext(ctx, db)
	if err != nil {
		return nil, fmt.Errorf("failed to get User: %w", err)
	}
	return &row, nil
}

type Groups []*Group

type GroupTable struct{}

func NewGroupTable() *GroupTable {
	return &GroupTable{}
}

func (g *GroupTable) GetByIDAndLeaderUserID(ctx context.Context, db sqlla.DB, c0 GroupID, c1 UserId) (*Group, error) {
	row, err := NewGroupSQL().Select().
		ID(c0).
		LeaderUserID(c1).
		SingleContext(ctx, db)
	if err != nil {
		return nil, fmt.Errorf("failed to get Group by ID and LeaderUserID: %w", err)
	}
	return &row, nil
}

func (g *GroupTable) ListByLeaderUserIDAndSubLeaderUserID(ctx context.Context, db sqlla.DB, c0 UserId, c1 int64) (Groups, error) {
	_rows, err := NewGroupSQL().Select().
		LeaderUserID(c0).
		SubLeaderUserID(c1).
		AllContext(ctx, db)
	if err != nil {
		return nil, fmt.Errorf("failed to list Group by LeaderUserID and SubLeaderUserID: %w", err)
	}
	rows := make(Groups, len(_rows))
	for i := range _rows {
		rows[i] = &_rows[i]
	}
	return rows, nil
}

type GroupTableCreateInput struct {
	Name            string
	LeaderUserID    UserId
	SubLeaderUserID sql.Null[int64]
	ChildGroupID    sql.Null[int64]
	CreatedAt       time.Time
}

func (g *GroupTable) newCreateSQL(input GroupTableCreateInput) groupInsertSQL {
	query := NewGroupSQL().Insert().
		ValueName(input.Name).
		ValueLeaderUserID(input.LeaderUserID).
		ValueCreatedAt(input.CreatedAt)
	if input.SubLeaderUserID.Valid {
		query = query.ValueSubLeaderUserID(input.SubLeaderUserID.V)
	} else {
		query = query.ValueSubLeaderUserIDIsNull()
	}
	if input.ChildGroupID.Valid {
		query = query.ValueChildGroupID(input.ChildGroupID.V)
	} else {
		query = query.ValueChildGroupIDIsNull()
	}
	return query
}

func (g *GroupTable) Create(ctx context.Context, db sqlla.DB, input GroupTableCreateInput) (*Group, error) {
	row, err := g.newCreateSQL(input).ExecContext(ctx, db)
	if err != nil {
		return nil, fmt.Errorf("failed to create Group: %w", err)
	}
	return &row, nil
}

func (g *GroupTable) CreateMulti(ctx context.Context, db sqlla.DB, inputs []GroupTableCreateInput) error {
	bi := NewGroupSQL().BulkInsert()
	for _, input := range inputs {
		bi.Append(g.newCreateSQL(input))
	}
	if _, err := bi.ExecContext(ctx, db); err != nil {
		return fmt.Errorf("failed to create Groups: %w", err)
	}
	return nil
}
