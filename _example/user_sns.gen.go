// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla - DO NOT EDIT.
package example

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"database/sql"
	"time"

	"github.com/mackee/go-sqlla/v2"
)

type userSNSSQL struct {
	where sqlla.Where
}

func NewUserSNSSQL() userSNSSQL {
	q := userSNSSQL{}
	return q
}

var userSNSAllColumns = []string{
	"`id`", "`sns_type`", "`created_at`", "`updated_at`",
}

type userSNSSelectSQL struct {
	userSNSSQL
	Columns     []string
	order       string
	limit       *uint64
	offset      *uint64
	tableAlias  string
	joinClauses []string

	additionalWhereClause     string
	additionalWhereClauseArgs []interface{}

	groupByColumns []string

	isForUpdate bool
}

func (q userSNSSQL) Select() userSNSSelectSQL {
	return userSNSSelectSQL{
		q,
		userSNSAllColumns,
		"",
		nil,
		nil,
		"",
		nil,
		"",
		nil,
		nil,
		false,
	}
}

func (q userSNSSelectSQL) Or(qs ...userSNSSelectSQL) userSNSSelectSQL {
	ws := make([]sqlla.Where, 0, len(qs))
	for _, q := range qs {
		ws = append(ws, q.where)
	}
	q.where = append(q.where, sqlla.ExprOr(ws))
	return q
}

func (q userSNSSelectSQL) Limit(l uint64) userSNSSelectSQL {
	q.limit = &l
	return q
}

func (q userSNSSelectSQL) Offset(o uint64) userSNSSelectSQL {
	q.offset = &o
	return q
}

func (q userSNSSelectSQL) ForUpdate() userSNSSelectSQL {
	q.isForUpdate = true
	return q
}

func (q userSNSSelectSQL) TableAlias(alias string) userSNSSelectSQL {
	q.tableAlias = "`" + alias + "`"
	return q
}

func (q userSNSSelectSQL) SetColumns(columns ...string) userSNSSelectSQL {
	q.Columns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(.`") {
			q.Columns = append(q.Columns, column)
		} else {
			q.Columns = append(q.Columns, "`"+column+"`")
		}
	}
	return q
}

func (q userSNSSelectSQL) JoinClause(clause string) userSNSSelectSQL {
	q.joinClauses = append(q.joinClauses, clause)
	return q
}

func (q userSNSSelectSQL) AdditionalWhereClause(clause string, args ...interface{}) userSNSSelectSQL {
	q.additionalWhereClause = clause
	q.additionalWhereClauseArgs = args
	return q
}

func (q userSNSSelectSQL) appendColumnPrefix(column string) string {
	if q.tableAlias == "" || strings.ContainsAny(column, "(.") {
		return column
	}
	return q.tableAlias + "." + column
}

func (q userSNSSelectSQL) GroupBy(columns ...string) userSNSSelectSQL {
	q.groupByColumns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(.`") {
			q.groupByColumns = append(q.groupByColumns, column)
		} else {
			q.groupByColumns = append(q.groupByColumns, "`"+column+"`")
		}
	}
	return q
}

func (q userSNSSelectSQL) ID(v uint64, exprs ...sqlla.Operator) userSNSSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: q.appendColumnPrefix("`id`")}
	q.where = append(q.where, where)
	return q
}

func (q userSNSSelectSQL) IDIn(vs ...uint64) userSNSSelectSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`id`")}
	q.where = append(q.where, where)
	return q
}

func (q userSNSSelectSQL) PkColumn(pk int64, exprs ...sqlla.Operator) userSNSSelectSQL {
	v := uint64(pk)
	return q.ID(v, exprs...)
}

func (q userSNSSelectSQL) OrderByID(order sqlla.Order) userSNSSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`id`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userSNSSelectSQL) SNSType(v string, exprs ...sqlla.Operator) userSNSSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`sns_type`")}
	q.where = append(q.where, where)
	return q
}

func (q userSNSSelectSQL) SNSTypeIn(vs ...string) userSNSSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`sns_type`")}
	q.where = append(q.where, where)
	return q
}

func (q userSNSSelectSQL) OrderBySNSType(order sqlla.Order) userSNSSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`sns_type`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userSNSSelectSQL) CreatedAt(v time.Time, exprs ...sqlla.Operator) userSNSSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: q.appendColumnPrefix("`created_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userSNSSelectSQL) CreatedAtIn(vs ...time.Time) userSNSSelectSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`created_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userSNSSelectSQL) OrderByCreatedAt(order sqlla.Order) userSNSSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`created_at`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userSNSSelectSQL) UpdatedAt(v time.Time, exprs ...sqlla.Operator) userSNSSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: q.appendColumnPrefix("`updated_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userSNSSelectSQL) UpdatedAtIn(vs ...time.Time) userSNSSelectSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`updated_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userSNSSelectSQL) OrderByUpdatedAt(order sqlla.Order) userSNSSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`updated_at`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userSNSSelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	tableName := "`user_sns`"
	if q.tableAlias != "" {
		tableName = tableName + " AS " + q.tableAlias
		pcs := make([]string, 0, len(q.Columns))
		for _, column := range q.Columns {
			pcs = append(pcs, q.appendColumnPrefix(column))
		}
		columns = strings.Join(pcs, ", ")
	}
	query := "SELECT " + columns + " FROM " + tableName
	if len(q.joinClauses) > 0 {
		jc := strings.Join(q.joinClauses, " ")
		query += " " + jc
	}
	if wheres != "" {
		query += " WHERE" + wheres
	}
	if q.additionalWhereClause != "" {
		query += " " + q.additionalWhereClause
		if len(q.additionalWhereClauseArgs) > 0 {
			vs = append(vs, q.additionalWhereClauseArgs...)
		}
	}
	if len(q.groupByColumns) > 0 {
		query += " GROUP BY "
		gbcs := make([]string, 0, len(q.groupByColumns))
		for _, column := range q.groupByColumns {
			gbcs = append(gbcs, q.appendColumnPrefix(column))
		}
		query += strings.Join(gbcs, ", ")
	}
	query += q.order
	if q.limit != nil {
		query += " LIMIT " + strconv.FormatUint(*q.limit, 10)
	}
	if q.offset != nil {
		query += " OFFSET " + strconv.FormatUint(*q.offset, 10)
	}

	if q.isForUpdate {
		query += " FOR UPDATE"
	}

	return query + ";", vs, nil
}

func (s UserSNS) Select() userSNSSelectSQL {
	return NewUserSNSSQL().Select().ID(s.ID)
}
func (q userSNSSelectSQL) Single(db sqlla.DB) (UserSNS, error) {
	q.Columns = userSNSAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return UserSNS{}, err
	}

	row := db.QueryRow(query, args...)
	return q.Scan(row)
}

func (q userSNSSelectSQL) SingleContext(ctx context.Context, db sqlla.DB) (UserSNS, error) {
	q.Columns = userSNSAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return UserSNS{}, err
	}

	row := db.QueryRowContext(ctx, query, args...)
	return q.Scan(row)
}

func (q userSNSSelectSQL) All(db sqlla.DB) ([]UserSNS, error) {
	rs := make([]UserSNS, 0, 10)
	q.Columns = userSNSAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q userSNSSelectSQL) AllContext(ctx context.Context, db sqlla.DB) ([]UserSNS, error) {
	rs := make([]UserSNS, 0, 10)
	q.Columns = userSNSAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q userSNSSelectSQL) Scan(s sqlla.Scanner) (UserSNS, error) {
	var row UserSNS
	err := s.Scan(
		&row.ID,
		&row.SNSType,
		&row.CreatedAt,
		&row.UpdatedAt,
	)
	return row, err
}

type userSNSUpdateSQL struct {
	userSNSSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q userSNSSQL) Update() userSNSUpdateSQL {
	return userSNSUpdateSQL{
		userSNSSQL: q,
		setMap:     sqlla.SetMap{},
	}
}

func (q userSNSUpdateSQL) SetID(v uint64) userSNSUpdateSQL {
	q.setMap["`id`"] = v
	return q
}

func (q userSNSUpdateSQL) WhereID(v uint64, exprs ...sqlla.Operator) userSNSUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSUpdateSQL) WhereIDIn(vs ...uint64) userSNSUpdateSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSUpdateSQL) SetSNSType(v string) userSNSUpdateSQL {
	q.setMap["`sns_type`"] = v
	return q
}

func (q userSNSUpdateSQL) WhereSNSType(v string, exprs ...sqlla.Operator) userSNSUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`sns_type`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSUpdateSQL) WhereSNSTypeIn(vs ...string) userSNSUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`sns_type`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSUpdateSQL) SetCreatedAt(v time.Time) userSNSUpdateSQL {
	q.setMap["`created_at`"] = v
	return q
}

func (q userSNSUpdateSQL) WhereCreatedAt(v time.Time, exprs ...sqlla.Operator) userSNSUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: "`created_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSUpdateSQL) WhereCreatedAtIn(vs ...time.Time) userSNSUpdateSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`created_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSUpdateSQL) SetUpdatedAt(v time.Time) userSNSUpdateSQL {
	q.setMap["`updated_at`"] = v
	return q
}

func (q userSNSUpdateSQL) WhereUpdatedAt(v time.Time, exprs ...sqlla.Operator) userSNSUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: "`updated_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSUpdateSQL) WhereUpdatedAtIn(vs ...time.Time) userSNSUpdateSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`updated_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = UserSNS{}
	if t, ok := s.(userSNSDefaultUpdateHooker); ok {
		q, err = t.DefaultUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	setColumns, svs, err := q.setMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	wheres, wvs, err := q.where.ToSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "UPDATE `user_sns` SET" + setColumns
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", append(svs, wvs...), nil
}
func (s UserSNS) Update() userSNSUpdateSQL {
	return NewUserSNSSQL().Update().WhereID(s.ID)
}

func (q userSNSUpdateSQL) Exec(db sqlla.DB) ([]UserSNS, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	_, err = db.Exec(query, args...)
	if err != nil {
		return nil, err
	}
	qq := q.userSNSSQL

	return qq.Select().All(db)
}

func (q userSNSUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]UserSNS, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	_, err = db.ExecContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	qq := q.userSNSSQL

	return qq.Select().AllContext(ctx, db)
}

type userSNSDefaultUpdateHooker interface {
	DefaultUpdateHook(userSNSUpdateSQL) (userSNSUpdateSQL, error)
}

type userSNSInsertSQL struct {
	userSNSSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q userSNSSQL) Insert() userSNSInsertSQL {
	return userSNSInsertSQL{
		userSNSSQL: q,
		setMap:     sqlla.SetMap{},
	}
}

func (q userSNSInsertSQL) ValueID(v uint64) userSNSInsertSQL {
	q.setMap["`id`"] = v
	return q
}

func (q userSNSInsertSQL) ValueSNSType(v string) userSNSInsertSQL {
	q.setMap["`sns_type`"] = v
	return q
}

func (q userSNSInsertSQL) ValueCreatedAt(v time.Time) userSNSInsertSQL {
	q.setMap["`created_at`"] = v
	return q
}

func (q userSNSInsertSQL) ValueUpdatedAt(v time.Time) userSNSInsertSQL {
	q.setMap["`updated_at`"] = v
	return q
}

func (q userSNSInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.userSNSInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q userSNSInsertSQL) userSNSInsertSQLToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = UserSNS{}
	if t, ok := s.(userSNSDefaultInsertHooker); ok {
		q, err = t.DefaultInsertHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	qs, vs, err := q.setMap.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "INSERT INTO `user_sns` " + qs

	return query, vs, nil
}

func (q userSNSInsertSQL) OnDuplicateKeyUpdate() userSNSInsertOnDuplicateKeyUpdateSQL {
	return userSNSInsertOnDuplicateKeyUpdateSQL{
		insertSQL:               q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

func (q userSNSInsertSQL) Exec(db sqlla.DB) (UserSNS, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return UserSNS{}, err
	}
	result, err := db.Exec(query, args...)
	if err != nil {
		return UserSNS{}, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return UserSNS{}, err
	}
	return NewUserSNSSQL().Select().PkColumn(id).Single(db)
}

func (q userSNSInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (UserSNS, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return UserSNS{}, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	if err != nil {
		return UserSNS{}, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return UserSNS{}, err
	}
	return NewUserSNSSQL().Select().PkColumn(id).SingleContext(ctx, db)
}

func (q userSNSInsertSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type userSNSDefaultInsertHooker interface {
	DefaultInsertHook(userSNSInsertSQL) (userSNSInsertSQL, error)
}

type userSNSInsertSQLToSqler interface {
	userSNSInsertSQLToSql() (string, []interface{}, error)
}

type userSNSInsertOnDuplicateKeyUpdateSQL struct {
	insertSQL               userSNSInsertSQLToSqler
	onDuplicateKeyUpdateMap sqlla.SetMap
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateID(v uint64) userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = v
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateID(v sqlla.SetMapRawValue) userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = v
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) SameOnUpdateID() userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = sqlla.SetMapRawValue("VALUES(`id`)")
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateSNSType(v string) userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`sns_type`"] = v
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateSNSType(v sqlla.SetMapRawValue) userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`sns_type`"] = v
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) SameOnUpdateSNSType() userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`sns_type`"] = sqlla.SetMapRawValue("VALUES(`sns_type`)")
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateCreatedAt(v time.Time) userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`created_at`"] = v
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateCreatedAt(v sqlla.SetMapRawValue) userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`created_at`"] = v
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) SameOnUpdateCreatedAt() userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`created_at`"] = sqlla.SetMapRawValue("VALUES(`created_at`)")
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUpdatedAt(v time.Time) userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`updated_at`"] = v
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUpdatedAt(v sqlla.SetMapRawValue) userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`updated_at`"] = v
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUpdatedAt() userSNSInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`updated_at`"] = sqlla.SetMapRawValue("VALUES(`updated_at`)")
	return q
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = UserSNS{}
	if t, ok := s.(userSNSDefaultInsertOnDuplicateKeyUpdateHooker); ok {
		q, err = t.DefaultInsertOnDuplicateKeyUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}

	query, vs, err := q.insertSQL.userSNSInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	os, ovs, err := q.onDuplicateKeyUpdateMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	query += " ON DUPLICATE KEY UPDATE" + os
	vs = append(vs, ovs...)

	return query + ";", vs, nil
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (UserSNS, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return UserSNS{}, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	if err != nil {
		return UserSNS{}, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return UserSNS{}, err
	}
	return NewUserSNSSQL().Select().PkColumn(id).SingleContext(ctx, db)
}

func (q userSNSInsertOnDuplicateKeyUpdateSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type userSNSDefaultInsertOnDuplicateKeyUpdateHooker interface {
	DefaultInsertOnDuplicateKeyUpdateHook(userSNSInsertOnDuplicateKeyUpdateSQL) (userSNSInsertOnDuplicateKeyUpdateSQL, error)
}

type userSNSBulkInsertSQL struct {
	insertSQLs []userSNSInsertSQL
}

func (q userSNSSQL) BulkInsert() *userSNSBulkInsertSQL {
	return &userSNSBulkInsertSQL{
		insertSQLs: []userSNSInsertSQL{},
	}
}

func (q *userSNSBulkInsertSQL) Append(iqs ...userSNSInsertSQL) {
	q.insertSQLs = append(q.insertSQLs, iqs...)
}

func (q *userSNSBulkInsertSQL) userSNSInsertSQLToSql() (string, []interface{}, error) {
	if len(q.insertSQLs) == 0 {
		return "", []interface{}{}, fmt.Errorf("sqlla: This userSNSBulkInsertSQL's InsertSQL was empty")
	}
	iqs := make([]userSNSInsertSQL, len(q.insertSQLs))
	copy(iqs, q.insertSQLs)

	var s interface{} = UserSNS{}
	if t, ok := s.(userSNSDefaultInsertHooker); ok {
		for i, iq := range iqs {
			var err error
			iq, err = t.DefaultInsertHook(iq)
			if err != nil {
				return "", []interface{}{}, err
			}
			iqs[i] = iq
		}
	}

	sms := make(sqlla.SetMaps, 0, len(q.insertSQLs))
	for _, iq := range q.insertSQLs {
		sms = append(sms, iq.setMap)
	}

	query, vs, err := sms.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	return "INSERT INTO `user_sns` " + query, vs, nil
}

func (q *userSNSBulkInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.userSNSInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q *userSNSBulkInsertSQL) OnDuplicateKeyUpdate() userSNSInsertOnDuplicateKeyUpdateSQL {
	return userSNSInsertOnDuplicateKeyUpdateSQL{
		insertSQL:               q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

func (q *userSNSBulkInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type userSNSDeleteSQL struct {
	userSNSSQL
}

func (q userSNSSQL) Delete() userSNSDeleteSQL {
	return userSNSDeleteSQL{
		q,
	}
}

func (q userSNSDeleteSQL) ID(v uint64, exprs ...sqlla.Operator) userSNSDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSDeleteSQL) IDIn(vs ...uint64) userSNSDeleteSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSDeleteSQL) SNSType(v string, exprs ...sqlla.Operator) userSNSDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`sns_type`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSDeleteSQL) SNSTypeIn(vs ...string) userSNSDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`sns_type`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSDeleteSQL) CreatedAt(v time.Time, exprs ...sqlla.Operator) userSNSDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: "`created_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSDeleteSQL) CreatedAtIn(vs ...time.Time) userSNSDeleteSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`created_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSDeleteSQL) UpdatedAt(v time.Time, exprs ...sqlla.Operator) userSNSDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: "`updated_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSDeleteSQL) UpdatedAtIn(vs ...time.Time) userSNSDeleteSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`updated_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userSNSDeleteSQL) ToSql() (string, []interface{}, error) {
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	query := "DELETE FROM `user_sns`"
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", vs, nil
}

func (q userSNSDeleteSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q userSNSDeleteSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
func (s UserSNS) Delete(db sqlla.DB) (sql.Result, error) {
	query, args, err := NewUserSNSSQL().Delete().ID(s.ID).ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (s UserSNS) DeleteContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := NewUserSNSSQL().Delete().ID(s.ID).ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
