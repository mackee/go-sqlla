// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla - DO NOT EDIT.
package postgresql

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"database/sql"
	"time"

	"github.com/pgvector/pgvector-go"

	"github.com/mackee/go-sqlla/v2"
)

type accountSQL struct {
	where sqlla.Where
}

func NewAccountSQL() accountSQL {
	q := accountSQL{}
	return q
}

var accountAllColumns = []string{
	"\"id\"", "\"name\"", "\"embedding\"", "\"created_at\"", "\"updated_at\"",
}

type accountSelectSQL struct {
	accountSQL
	Columns     []string
	order       sqlla.OrderWithColumn
	limit       *uint64
	offset      *uint64
	tableAlias  string
	joinClauses []string

	additionalWhereClause func(int) (string, int, []any)
	groupByColumns        []string

	isForUpdate bool
}

func (q accountSQL) Select() accountSelectSQL {
	return accountSelectSQL{
		q,
		accountAllColumns,
		nil,
		nil,
		nil,
		"",
		nil, nil,
		nil,
		false,
	}
}

func (q accountSelectSQL) Or(qs ...accountSelectSQL) accountSelectSQL {
	ws := make([]sqlla.Where, 0, len(qs))
	for _, q := range qs {
		ws = append(ws, q.where)
	}
	q.where = append(q.where, sqlla.ExprOr(ws))
	return q
}

func (q accountSelectSQL) Limit(l uint64) accountSelectSQL {
	q.limit = &l
	return q
}

func (q accountSelectSQL) Offset(o uint64) accountSelectSQL {
	q.offset = &o
	return q
}

func (q accountSelectSQL) ForUpdate() accountSelectSQL {
	q.isForUpdate = true
	return q
}

func (q accountSelectSQL) TableAlias(alias string) accountSelectSQL {
	q.tableAlias = "\"" + alias + "\""
	return q
}

func (q accountSelectSQL) SetColumns(columns ...string) accountSelectSQL {
	q.Columns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(."+"\"") {
			q.Columns = append(q.Columns, column)
		} else {
			q.Columns = append(q.Columns, "\""+column+"\"")
		}
	}
	return q
}

func (q accountSelectSQL) JoinClause(clause string) accountSelectSQL {
	q.joinClauses = append(q.joinClauses, clause)
	return q
}

func (q accountSelectSQL) AdditionalWhereClause(clause func(int) (string, int, []any)) accountSelectSQL {
	q.additionalWhereClause = clause
	return q
}

func (q accountSelectSQL) appendColumnPrefix(column string) string {
	if q.tableAlias == "" || strings.ContainsAny(column, "(.") {
		return column
	}
	return q.tableAlias + "." + column
}

func (q accountSelectSQL) GroupBy(columns ...string) accountSelectSQL {
	q.groupByColumns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(."+"\"") {
			q.groupByColumns = append(q.groupByColumns, column)
		} else {
			q.groupByColumns = append(q.groupByColumns, "\""+column+"\"")
		}
	}
	return q
}

func (q accountSelectSQL) ID(v AccountID, exprs ...sqlla.Operator) accountSelectSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"id\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) IDIn(vs ...AccountID) accountSelectSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"id\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) OrderByID(order sqlla.Order) accountSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"id\""))
	return q
}

func (q accountSelectSQL) Name(v string, exprs ...sqlla.Operator) accountSelectSQL {
	where := sqlla.ExprValue[string]{Value: v, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"name\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) NameIn(vs ...string) accountSelectSQL {
	where := sqlla.ExprMultiValue[string]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"name\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) OrderByName(order sqlla.Order) accountSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"name\""))
	return q
}

func (q accountSelectSQL) Embedding(v pgvector.Vector, exprs ...sqlla.Operator) accountSelectSQL {
	where := sqlla.ExprValue[pgvector.Vector]{Value: v, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"embedding\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) EmbeddingIn(vs ...pgvector.Vector) accountSelectSQL {
	where := sqlla.ExprMultiValue[pgvector.Vector]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"embedding\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) OrderByEmbedding(order sqlla.Order) accountSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"embedding\""))
	return q
}

func (q accountSelectSQL) CreatedAt(v time.Time, exprs ...sqlla.Operator) accountSelectSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"created_at\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) CreatedAtIn(vs ...time.Time) accountSelectSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"created_at\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) OrderByCreatedAt(order sqlla.Order) accountSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"created_at\""))
	return q
}

func (q accountSelectSQL) UpdatedAt(v time.Time, exprs ...sqlla.Operator) accountSelectSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"updated_at\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) UpdatedAtIn(vs ...time.Time) accountSelectSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"updated_at\"")}
	q.where = append(q.where, where)
	return q
}

func (q accountSelectSQL) OrderByUpdatedAt(order sqlla.Order) accountSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"updated_at\""))
	return q
}

func (q accountSelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, offset, vs, err := q.where.ToSqlPg(0)
	if err != nil {
		return "", nil, err
	}

	tableName := "\"accounts\""
	if q.tableAlias != "" {
		tableName = tableName + " AS " + q.tableAlias
		pcs := make([]string, 0, len(q.Columns))
		for _, column := range q.Columns {
			pcs = append(pcs, q.appendColumnPrefix(column))
		}
		columns = strings.Join(pcs, ", ")
	}
	query := "SELECT " + columns + " FROM " + tableName
	if len(q.joinClauses) > 0 {
		jc := strings.Join(q.joinClauses, " ")
		query += " " + jc
	}
	if wheres != "" {
		query += " WHERE" + wheres
	}
	if q.additionalWhereClause != nil {
		_query, _offset, _args := q.additionalWhereClause(offset)
		query += " " + _query
		if len(_args) > 0 {
			vs = append(vs, _args...)
		}
		offset = _offset
	}
	if len(q.groupByColumns) > 0 {
		query += " GROUP BY "
		gbcs := make([]string, 0, len(q.groupByColumns))
		for _, column := range q.groupByColumns {
			gbcs = append(gbcs, q.appendColumnPrefix(column))
		}
		query += strings.Join(gbcs, ", ")
	}
	if q.order != nil {
		_query, _ := q.order.OrderExprPg(offset)
		query += " ORDER BY " + _query
		vs = append(vs, q.order.Values()...)
	}
	if q.limit != nil {
		query += " LIMIT " + strconv.FormatUint(*q.limit, 10)
	}
	if q.offset != nil {
		query += " OFFSET " + strconv.FormatUint(*q.offset, 10)
	}

	if q.isForUpdate {
		query += " FOR UPDATE"
	}

	return query + ";", vs, nil
}

func (s Account) Select() accountSelectSQL {
	return NewAccountSQL().Select().ID(s.ID)
}
func (q accountSelectSQL) Single(db sqlla.DB) (Account, error) {
	q.Columns = accountAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return Account{}, err
	}

	row := db.QueryRow(query, args...)
	return q.Scan(row)
}

func (q accountSelectSQL) SingleContext(ctx context.Context, db sqlla.DB) (Account, error) {
	q.Columns = accountAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return Account{}, err
	}

	row := db.QueryRowContext(ctx, query, args...)
	return q.Scan(row)
}

func (q accountSelectSQL) All(db sqlla.DB) ([]Account, error) {
	rs := make([]Account, 0, 10)
	q.Columns = accountAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q accountSelectSQL) AllContext(ctx context.Context, db sqlla.DB) ([]Account, error) {
	rs := make([]Account, 0, 10)
	q.Columns = accountAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q accountSelectSQL) Scan(s sqlla.Scanner) (Account, error) {
	var row Account
	err := s.Scan(
		&row.ID,
		&row.Name,
		&row.Embedding,
		&row.CreatedAt,
		&row.UpdatedAt,
	)
	return row, err
}

// IterContext returns iter.Seq2[Account, error] and closer.
//
// The returned Iter.Seq2 assembles and executes a query in the first iteration.
// Therefore, the first iteration may return an error in assembling or executing the query.
// Subsequent iterations read rows. Again, the read may return an error.
//
// closer is a function that closes the row reader object. Execution of this function is idempotent.
// Be sure to call it when you are done using iter.Seq2.
func (q accountSelectSQL) IterContext(ctx context.Context, db sqlla.DB) (func(func(Account, error) bool), func() error) {
	var rowClose func() error
	closer := func() error {
		if rowClose != nil {
			err := rowClose()
			rowClose = nil
			return err
		}
		return nil
	}

	q.Columns = accountAllColumns
	query, args, err := q.ToSql()
	return func(yield func(Account, error) bool) {
		if err != nil {
			var r Account
			yield(r, err)
			return
		}
		rows, err := db.QueryContext(ctx, query, args...)
		if err != nil {
			var r Account
			yield(r, err)
			return
		}
		rowClose = rows.Close
		for rows.Next() {
			r, err := q.Scan(rows)
			if !yield(r, err) {
				break
			}
		}
	}, closer
}

type accountUpdateSQL struct {
	accountSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q accountSQL) Update() accountUpdateSQL {
	return accountUpdateSQL{
		accountSQL: q,
		setMap:     sqlla.SetMap{},
	}
}

func (q accountUpdateSQL) SetID(v AccountID) accountUpdateSQL {
	q.setMap["\"id\""] = int64(v)
	return q
}

func (q accountUpdateSQL) WhereID(v AccountID, exprs ...sqlla.Operator) accountUpdateSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: "\"id\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) WhereIDIn(vs ...AccountID) accountUpdateSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"id\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) SetName(v string) accountUpdateSQL {
	q.setMap["\"name\""] = v
	return q
}

func (q accountUpdateSQL) WhereName(v string, exprs ...sqlla.Operator) accountUpdateSQL {
	where := sqlla.ExprValue[string]{Value: v, Op: sqlla.Operators(exprs), Column: "\"name\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) WhereNameIn(vs ...string) accountUpdateSQL {
	where := sqlla.ExprMultiValue[string]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"name\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) SetEmbedding(v pgvector.Vector) accountUpdateSQL {
	q.setMap["\"embedding\""] = v
	return q
}

func (q accountUpdateSQL) WhereEmbedding(v pgvector.Vector, exprs ...sqlla.Operator) accountUpdateSQL {
	where := sqlla.ExprValue[pgvector.Vector]{Value: v, Op: sqlla.Operators(exprs), Column: "\"embedding\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) WhereEmbeddingIn(vs ...pgvector.Vector) accountUpdateSQL {
	where := sqlla.ExprMultiValue[pgvector.Vector]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"embedding\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) SetCreatedAt(v time.Time) accountUpdateSQL {
	q.setMap["\"created_at\""] = v
	return q
}

func (q accountUpdateSQL) WhereCreatedAt(v time.Time, exprs ...sqlla.Operator) accountUpdateSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: "\"created_at\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) WhereCreatedAtIn(vs ...time.Time) accountUpdateSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"created_at\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) SetUpdatedAt(v time.Time) accountUpdateSQL {
	q.setMap["\"updated_at\""] = v
	return q
}

func (q accountUpdateSQL) WhereUpdatedAt(v time.Time, exprs ...sqlla.Operator) accountUpdateSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: "\"updated_at\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) WhereUpdatedAtIn(vs ...time.Time) accountUpdateSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"updated_at\""}
	q.where = append(q.where, where)
	return q
}

func (q accountUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Account{}
	if t, ok := s.(accountDefaultUpdateHooker); ok {
		q, err = t.DefaultUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	setColumns, offset, svs, err := q.setMap.ToUpdateSqlPg(0)
	if err != nil {
		return "", []interface{}{}, err
	}
	wheres, _, wvs, err := q.where.ToSqlPg(offset)
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "UPDATE " + "\"accounts\"" + " SET" + setColumns
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", append(svs, wvs...), nil
}
func (q accountUpdateSQL) ToSqlWithReturning() (string, []interface{}, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	query = strings.TrimSuffix(query, ";")
	query += " RETURNING " + strings.Join(accountAllColumns, ", ")
	return query + ";", args, nil
}

func (s Account) Update() accountUpdateSQL {
	return NewAccountSQL().Update().WhereID(s.ID)
}

func (q accountUpdateSQL) Exec(db sqlla.DB) ([]Account, error) {
	return q.ExecContext(context.Background(), db)
}

func (q accountUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]Account, error) {
	query, args, err := q.ToSqlWithReturning()
	if err != nil {
		return nil, err
	}
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	results := make([]Account, 0, 1)
	defer rows.Close()
	sel := NewAccountSQL().Select()
	for rows.Next() {
		result, err := sel.Scan(rows)
		if err != nil {
			return nil, err
		}
		results = append(results, result)
	}

	return results, nil
}

type accountDefaultUpdateHooker interface {
	DefaultUpdateHook(accountUpdateSQL) (accountUpdateSQL, error)
}

type accountInsertSQL struct {
	accountSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q accountSQL) Insert() accountInsertSQL {
	return accountInsertSQL{
		accountSQL: q,
		setMap:     sqlla.SetMap{},
	}
}

func (q accountInsertSQL) ValueID(v AccountID) accountInsertSQL {
	q.setMap["\"id\""] = int64(v)
	return q
}

func (q accountInsertSQL) ValueName(v string) accountInsertSQL {
	q.setMap["\"name\""] = v
	return q
}

func (q accountInsertSQL) ValueEmbedding(v pgvector.Vector) accountInsertSQL {
	q.setMap["\"embedding\""] = v
	return q
}

func (q accountInsertSQL) ValueCreatedAt(v time.Time) accountInsertSQL {
	q.setMap["\"created_at\""] = v
	return q
}

func (q accountInsertSQL) ValueUpdatedAt(v time.Time) accountInsertSQL {
	q.setMap["\"updated_at\""] = v
	return q
}

func (q accountInsertSQL) ToSql() (string, []any, error) {
	query, _, vs, err := q.accountInsertSQLToSqlPg(0)
	if err != nil {
		return "", []any{}, err
	}
	columns := strings.Join(accountAllColumns, ", ")
	return query + " RETURNING " + columns + ";", vs, nil
}

func (q accountInsertSQL) rowsNum() int {
	return 1
}

func (q accountInsertSQL) accountInsertSQLToSqlPg(offset int) (string, int, []any, error) {
	var err error
	var s interface{} = Account{}
	if t, ok := s.(accountDefaultInsertHooker); ok {
		q, err = t.DefaultInsertHook(q)
		if err != nil {
			return "", 0, []any{}, err
		}
	}
	qs, offset, vs, err := q.setMap.ToInsertSqlPg(offset)
	if err != nil {
		return "", 0, []any{}, err
	}

	query := "INSERT INTO " + "\"accounts\"" + " " + qs
	return query, offset, vs, nil
}

func (q accountInsertSQL) Exec(db sqlla.DB) (Account, error) {
	return q.ExecContext(context.Background(), db)
}

func (q accountInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (Account, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return Account{}, err
	}
	row := db.QueryRowContext(ctx, query, args...)
	result, err := NewAccountSQL().Select().Scan(row)
	if err != nil {
		return Account{}, err
	}
	return result, nil
}

func (q accountInsertSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type accountDefaultInsertHooker interface {
	DefaultInsertHook(accountInsertSQL) (accountInsertSQL, error)
}

type accountInsertSQLToSqler interface {
	rowsNum() int
	accountInsertSQLToSqlPg(offset int) (string, int, []any, error)
}

type accountBulkInsertSQL struct {
	insertSQLs []accountInsertSQL
}

func (q accountSQL) BulkInsert() *accountBulkInsertSQL {
	return &accountBulkInsertSQL{
		insertSQLs: []accountInsertSQL{},
	}
}

func (q *accountBulkInsertSQL) Append(iqs ...accountInsertSQL) {
	q.insertSQLs = append(q.insertSQLs, iqs...)
}

func (q *accountBulkInsertSQL) rowsNum() int {
	return len(q.insertSQLs)
}

func (q *accountBulkInsertSQL) accountInsertSQLToSqlPg(offset int) (string, int, []any, error) {
	if len(q.insertSQLs) == 0 {
		return "", 0, []any{}, fmt.Errorf("sqlla: This accountBulkInsertSQL's InsertSQL was empty")
	}
	iqs := make([]accountInsertSQL, len(q.insertSQLs))
	copy(iqs, q.insertSQLs)

	var s interface{} = Account{}
	if t, ok := s.(accountDefaultInsertHooker); ok {
		for i, iq := range iqs {
			var err error
			iq, err = t.DefaultInsertHook(iq)
			if err != nil {
				return "", 0, []any{}, err
			}
			iqs[i] = iq
		}
	}

	sms := make(sqlla.SetMaps, 0, len(q.insertSQLs))
	for _, iq := range q.insertSQLs {
		sms = append(sms, iq.setMap)
	}

	query, offset, vs, err := sms.ToInsertSqlPg(offset)
	if err != nil {
		return "", 0, []any{}, err
	}
	return "INSERT INTO " + "\"accounts\"" + " " + query, offset, vs, nil
}

func (q *accountBulkInsertSQL) ToSql() (string, []any, error) {
	query, _, vs, err := q.accountInsertSQLToSqlPg(0)
	if err != nil {
		return "", []any{}, err
	}
	columns := strings.Join(accountAllColumns, ", ")
	return query + " RETURNING " + columns + ";", vs, nil
}
func (q *accountBulkInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]Account, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	results := make([]Account, 0, len(q.insertSQLs))
	sel := NewAccountSQL().Select()
	for rows.Next() {
		result, err := sel.Scan(rows)
		if err != nil {
			return nil, err
		}
		results = append(results, result)
	}
	return results, nil
}

func (q *accountBulkInsertSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type accountInsertOnConflictDoNothingSQL struct {
	insertSQL accountInsertSQLToSqler
}

func (q accountInsertSQL) OnConflictDoNothing() accountInsertOnConflictDoNothingSQL {
	return accountInsertOnConflictDoNothingSQL{
		insertSQL: q,
	}
}

func (q accountInsertOnConflictDoNothingSQL) ToSql() (string, []any, error) {
	query, _, vs, err := q.insertSQL.accountInsertSQLToSqlPg(0)
	if err != nil {
		return "", nil, err
	}
	columns := strings.Join(accountAllColumns, ", ")
	query += " ON CONFLICT DO NOTHING" + " RETURNING " + columns
	return query + ";", vs, nil

}

func (q accountInsertOnConflictDoNothingSQL) ExecContext(ctx context.Context, db sqlla.DB) (Account, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return Account{}, err
	}
	row := db.QueryRowContext(ctx, query, args...)
	result, err := NewAccountSQL().Select().Scan(row)
	if err != nil {
		return Account{}, err
	}
	return result, nil

}

func (q accountInsertOnConflictDoNothingSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {

	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err

}

type accountInsertOnConflictDoUpdateSQL struct {
	insertSQL             accountInsertSQLToSqler
	onConflictDoUpdateMap sqlla.SetMap
	target                string
}

func (q accountInsertSQL) OnConflictDoUpdate(target string) accountInsertOnConflictDoUpdateSQL {
	return accountInsertOnConflictDoUpdateSQL{
		insertSQL:             q,
		onConflictDoUpdateMap: sqlla.SetMap{},
		target:                target,
	}
}

func (q accountInsertOnConflictDoUpdateSQL) ValueOnUpdateID(v AccountID) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"id\""] = int64(v)
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) RawValueOnUpdateID(v sqlla.SetMapRawValue) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"id\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) SameOnUpdateID() accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"id\""] = sqlla.SetMapRawValue(`"excluded".` + "\"id\"")
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) ValueOnUpdateName(v string) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"name\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) RawValueOnUpdateName(v sqlla.SetMapRawValue) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"name\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) SameOnUpdateName() accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"name\""] = sqlla.SetMapRawValue(`"excluded".` + "\"name\"")
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) ValueOnUpdateEmbedding(v pgvector.Vector) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"embedding\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) RawValueOnUpdateEmbedding(v sqlla.SetMapRawValue) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"embedding\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) SameOnUpdateEmbedding() accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"embedding\""] = sqlla.SetMapRawValue(`"excluded".` + "\"embedding\"")
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) ValueOnUpdateCreatedAt(v time.Time) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"created_at\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) RawValueOnUpdateCreatedAt(v sqlla.SetMapRawValue) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"created_at\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) SameOnUpdateCreatedAt() accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"created_at\""] = sqlla.SetMapRawValue(`"excluded".` + "\"created_at\"")
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) ValueOnUpdateUpdatedAt(v time.Time) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"updated_at\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) RawValueOnUpdateUpdatedAt(v sqlla.SetMapRawValue) accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"updated_at\""] = v
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) SameOnUpdateUpdatedAt() accountInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"updated_at\""] = sqlla.SetMapRawValue(`"excluded".` + "\"updated_at\"")
	return q
}

func (q accountInsertOnConflictDoUpdateSQL) ToSql() (string, []any, error) {
	var err error
	var s any = Account{}
	if t, ok := s.(accountDefaultInsertOnConflictDoUpdateHooker); ok {
		q, err = t.DefaultInsertOnConflictDoUpdateHook(q)
		if err != nil {
			return "", nil, err
		}
	}

	query, offset, vs, err := q.insertSQL.accountInsertSQLToSqlPg(0)
	if err != nil {
		return "", nil, err
	}

	os, _, ovs, err := q.onConflictDoUpdateMap.ToUpdateSqlPg(offset)
	if err != nil {
		return "", nil, err
	}
	query += " ON CONFLICT (" + q.target + ") DO UPDATE SET" + os
	vs = append(vs, ovs...)
	columns := strings.Join(accountAllColumns, ", ")
	query += " RETURNING " + columns

	return query + ";", vs, nil
}

func (q accountInsertOnConflictDoUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (Account, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return Account{}, err
	}
	row := db.QueryRowContext(ctx, query, args...)
	result, err := NewAccountSQL().Select().Scan(row)
	if err != nil {
		return Account{}, err
	}
	return result, nil

}

func (q accountInsertOnConflictDoUpdateSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {

	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err

}

type accountDefaultInsertOnConflictDoUpdateHooker interface {
	DefaultInsertOnConflictDoUpdateHook(accountInsertOnConflictDoUpdateSQL) (accountInsertOnConflictDoUpdateSQL, error)
}

type accountBulkInsertOnConflictDoNothingSQL struct {
	insertSQL accountInsertSQLToSqler
}

func (q *accountBulkInsertSQL) OnConflictDoNothing() accountBulkInsertOnConflictDoNothingSQL {
	return accountBulkInsertOnConflictDoNothingSQL{
		insertSQL: q,
	}
}

func (q accountBulkInsertOnConflictDoNothingSQL) ToSql() (string, []any, error) {
	query, _, vs, err := q.insertSQL.accountInsertSQLToSqlPg(0)
	if err != nil {
		return "", nil, err
	}
	columns := strings.Join(accountAllColumns, ", ")
	query += " ON CONFLICT DO NOTHING" + " RETURNING " + columns
	return query + ";", vs, nil

}

func (q accountBulkInsertOnConflictDoNothingSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]Account, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	results := make([]Account, 0, q.insertSQL.rowsNum())
	sel := NewAccountSQL().Select()
	for rows.Next() {
		result, err := sel.Scan(rows)
		if err != nil {
			return nil, err
		}
		results = append(results, result)
	}

	return results, nil

}

func (q accountBulkInsertOnConflictDoNothingSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {

	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err

}

type accountBulkInsertOnConflictDoUpdateSQL struct {
	insertSQL             accountInsertSQLToSqler
	onConflictDoUpdateMap sqlla.SetMap
	target                string
}

func (q *accountBulkInsertSQL) OnConflictDoUpdate(target string) accountBulkInsertOnConflictDoUpdateSQL {
	return accountBulkInsertOnConflictDoUpdateSQL{
		insertSQL:             q,
		onConflictDoUpdateMap: sqlla.SetMap{},
		target:                target,
	}
}

func (q accountBulkInsertOnConflictDoUpdateSQL) ValueOnUpdateID(v AccountID) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"id\""] = int64(v)
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) RawValueOnUpdateID(v sqlla.SetMapRawValue) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"id\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) SameOnUpdateID() accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"id\""] = sqlla.SetMapRawValue(`"excluded".` + "\"id\"")
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) ValueOnUpdateName(v string) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"name\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) RawValueOnUpdateName(v sqlla.SetMapRawValue) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"name\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) SameOnUpdateName() accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"name\""] = sqlla.SetMapRawValue(`"excluded".` + "\"name\"")
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) ValueOnUpdateEmbedding(v pgvector.Vector) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"embedding\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) RawValueOnUpdateEmbedding(v sqlla.SetMapRawValue) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"embedding\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) SameOnUpdateEmbedding() accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"embedding\""] = sqlla.SetMapRawValue(`"excluded".` + "\"embedding\"")
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) ValueOnUpdateCreatedAt(v time.Time) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"created_at\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) RawValueOnUpdateCreatedAt(v sqlla.SetMapRawValue) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"created_at\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) SameOnUpdateCreatedAt() accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"created_at\""] = sqlla.SetMapRawValue(`"excluded".` + "\"created_at\"")
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) ValueOnUpdateUpdatedAt(v time.Time) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"updated_at\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) RawValueOnUpdateUpdatedAt(v sqlla.SetMapRawValue) accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"updated_at\""] = v
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) SameOnUpdateUpdatedAt() accountBulkInsertOnConflictDoUpdateSQL {
	q.onConflictDoUpdateMap["\"updated_at\""] = sqlla.SetMapRawValue(`"excluded".` + "\"updated_at\"")
	return q
}

func (q accountBulkInsertOnConflictDoUpdateSQL) ToSql() (string, []any, error) {
	var s any = Account{}
	if t, ok := s.(accountDefaultInsertOnConflictDoUpdateHooker); ok {
		sq := accountInsertOnConflictDoUpdateSQL{
			insertSQL:             q.insertSQL,
			onConflictDoUpdateMap: q.onConflictDoUpdateMap,
			target:                q.target,
		}
		sq, err := t.DefaultInsertOnConflictDoUpdateHook(sq)
		if err != nil {
			return "", nil, err
		}
		q.insertSQL = sq.insertSQL
		q.onConflictDoUpdateMap = sq.onConflictDoUpdateMap
		q.target = sq.target
	}

	query, offset, vs, err := q.insertSQL.accountInsertSQLToSqlPg(0)
	if err != nil {
		return "", nil, err
	}

	os, _, ovs, err := q.onConflictDoUpdateMap.ToUpdateSqlPg(offset)
	if err != nil {
		return "", nil, err
	}
	query += " ON CONFLICT (" + q.target + ") DO UPDATE SET" + os
	vs = append(vs, ovs...)
	columns := strings.Join(accountAllColumns, ", ")
	query += " RETURNING " + columns

	return query + ";", vs, nil
}

func (q accountBulkInsertOnConflictDoUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]Account, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	results := make([]Account, 0, q.insertSQL.rowsNum())
	sel := NewAccountSQL().Select()
	for rows.Next() {
		result, err := sel.Scan(rows)
		if err != nil {
			return nil, err
		}
		results = append(results, result)
	}

	return results, nil

}

func (q accountBulkInsertOnConflictDoUpdateSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {

	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err

}

type accountDeleteSQL struct {
	accountSQL
}

func (q accountSQL) Delete() accountDeleteSQL {
	return accountDeleteSQL{
		q,
	}
}

func (q accountDeleteSQL) ID(v AccountID, exprs ...sqlla.Operator) accountDeleteSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: "\"id\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) IDIn(vs ...AccountID) accountDeleteSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"id\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) Name(v string, exprs ...sqlla.Operator) accountDeleteSQL {
	where := sqlla.ExprValue[string]{Value: v, Op: sqlla.Operators(exprs), Column: "\"name\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) NameIn(vs ...string) accountDeleteSQL {
	where := sqlla.ExprMultiValue[string]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"name\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) Embedding(v pgvector.Vector, exprs ...sqlla.Operator) accountDeleteSQL {
	where := sqlla.ExprValue[pgvector.Vector]{Value: v, Op: sqlla.Operators(exprs), Column: "\"embedding\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) EmbeddingIn(vs ...pgvector.Vector) accountDeleteSQL {
	where := sqlla.ExprMultiValue[pgvector.Vector]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"embedding\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) CreatedAt(v time.Time, exprs ...sqlla.Operator) accountDeleteSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: "\"created_at\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) CreatedAtIn(vs ...time.Time) accountDeleteSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"created_at\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) UpdatedAt(v time.Time, exprs ...sqlla.Operator) accountDeleteSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: "\"updated_at\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) UpdatedAtIn(vs ...time.Time) accountDeleteSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"updated_at\""}
	q.where = append(q.where, where)
	return q
}

func (q accountDeleteSQL) ToSql() (string, []interface{}, error) {
	wheres, _, vs, err := q.where.ToSqlPg(0)
	if err != nil {
		return "", nil, err
	}

	query := "DELETE FROM " + "\"accounts\""
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", vs, nil
}

func (q accountDeleteSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q accountDeleteSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
func (s Account) Delete(db sqlla.DB) (sql.Result, error) {
	query, args, err := NewAccountSQL().Delete().ID(s.ID).ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (s Account) DeleteContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := NewAccountSQL().Delete().ID(s.ID).ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
