// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla - DO NOT EDIT.
package postgresql

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"database/sql"
	"time"

	"github.com/mackee/go-sqlla/v2"
)

type groupSQL struct {
	where sqlla.Where
}

func NewGroupSQL() groupSQL {
	q := groupSQL{}
	return q
}

var groupAllColumns = []string{
	"\"id\"", "\"name\"", "\"leader_account_id\"", "\"sub_leader_account_id\"", "\"child_group_id\"", "\"created_at\"", "\"updated_at\"",
}

type groupSelectSQL struct {
	groupSQL
	Columns     []string
	order       sqlla.OrderWithColumn
	limit       *uint64
	offset      *uint64
	tableAlias  string
	joinClauses []string

	additionalWhereClause func(int) (string, int, []any)
	groupByColumns        []string

	isForUpdate bool
}

func (q groupSQL) Select() groupSelectSQL {
	return groupSelectSQL{
		q,
		groupAllColumns,
		nil,
		nil,
		nil,
		"",
		nil, nil,
		nil,
		false,
	}
}

func (q groupSelectSQL) Or(qs ...groupSelectSQL) groupSelectSQL {
	ws := make([]sqlla.Where, 0, len(qs))
	for _, q := range qs {
		ws = append(ws, q.where)
	}
	q.where = append(q.where, sqlla.ExprOr(ws))
	return q
}

func (q groupSelectSQL) Limit(l uint64) groupSelectSQL {
	q.limit = &l
	return q
}

func (q groupSelectSQL) Offset(o uint64) groupSelectSQL {
	q.offset = &o
	return q
}

func (q groupSelectSQL) ForUpdate() groupSelectSQL {
	q.isForUpdate = true
	return q
}

func (q groupSelectSQL) TableAlias(alias string) groupSelectSQL {
	q.tableAlias = "\"" + alias + "\""
	return q
}

func (q groupSelectSQL) SetColumns(columns ...string) groupSelectSQL {
	q.Columns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(."+"\"") {
			q.Columns = append(q.Columns, column)
		} else {
			q.Columns = append(q.Columns, "\""+column+"\"")
		}
	}
	return q
}

func (q groupSelectSQL) JoinClause(clause string) groupSelectSQL {
	q.joinClauses = append(q.joinClauses, clause)
	return q
}

func (q groupSelectSQL) AdditionalWhereClause(clause func(int) (string, int, []any)) groupSelectSQL {
	q.additionalWhereClause = clause
	return q
}

func (q groupSelectSQL) appendColumnPrefix(column string) string {
	if q.tableAlias == "" || strings.ContainsAny(column, "(.") {
		return column
	}
	return q.tableAlias + "." + column
}

func (q groupSelectSQL) GroupBy(columns ...string) groupSelectSQL {
	q.groupByColumns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(."+"\"") {
			q.groupByColumns = append(q.groupByColumns, column)
		} else {
			q.groupByColumns = append(q.groupByColumns, "\""+column+"\"")
		}
	}
	return q
}

func (q groupSelectSQL) ID(v GroupID, exprs ...sqlla.Operator) groupSelectSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) IDIn(vs ...GroupID) groupSelectSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) PkColumn(pk int64, exprs ...sqlla.Operator) groupSelectSQL {
	v := GroupID(pk)
	return q.ID(v, exprs...)
}

func (q groupSelectSQL) OrderByID(order sqlla.Order) groupSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"id\""))
	return q
}

func (q groupSelectSQL) Name(v string, exprs ...sqlla.Operator) groupSelectSQL {
	where := sqlla.ExprValue[string]{Value: v, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"name\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) NameIn(vs ...string) groupSelectSQL {
	where := sqlla.ExprMultiValue[string]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"name\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) OrderByName(order sqlla.Order) groupSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"name\""))
	return q
}

func (q groupSelectSQL) LeaderAccountID(v AccountID, exprs ...sqlla.Operator) groupSelectSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"leader_account_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) LeaderAccountIDIn(vs ...AccountID) groupSelectSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"leader_account_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) OrderByLeaderAccountID(order sqlla.Order) groupSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"leader_account_id\""))
	return q
}

func (q groupSelectSQL) SubLeaderAccountID(v AccountID, exprs ...sqlla.Operator) groupSelectSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{V: int64(v), Valid: true}, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"sub_leader_account_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) SubLeaderAccountIDIsNull() groupSelectSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators{sqlla.OpEqual}, Column: q.appendColumnPrefix("\"sub_leader_account_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) SubLeaderAccountIDIsNotNull() groupSelectSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators{sqlla.OpNot}, Column: q.appendColumnPrefix("\"sub_leader_account_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) SubLeaderAccountIDIn(vs ...AccountID) groupSelectSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"sub_leader_account_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) OrderBySubLeaderAccountID(order sqlla.Order) groupSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"sub_leader_account_id\""))
	return q
}

func (q groupSelectSQL) ChildGroupID(v GroupID, exprs ...sqlla.Operator) groupSelectSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{V: int64(v), Valid: true}, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"child_group_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) ChildGroupIDIsNull() groupSelectSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators{sqlla.OpEqual}, Column: q.appendColumnPrefix("\"child_group_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) ChildGroupIDIsNotNull() groupSelectSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators{sqlla.OpNot}, Column: q.appendColumnPrefix("\"child_group_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) ChildGroupIDIn(vs ...GroupID) groupSelectSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"child_group_id\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) OrderByChildGroupID(order sqlla.Order) groupSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"child_group_id\""))
	return q
}

func (q groupSelectSQL) CreatedAt(v time.Time, exprs ...sqlla.Operator) groupSelectSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"created_at\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) CreatedAtIn(vs ...time.Time) groupSelectSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"created_at\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) OrderByCreatedAt(order sqlla.Order) groupSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"created_at\""))
	return q
}

func (q groupSelectSQL) UpdatedAt(v time.Time, exprs ...sqlla.Operator) groupSelectSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: q.appendColumnPrefix("\"updated_at\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) UpdatedAtIn(vs ...time.Time) groupSelectSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("\"updated_at\"")}
	q.where = append(q.where, where)
	return q
}

func (q groupSelectSQL) OrderByUpdatedAt(order sqlla.Order) groupSelectSQL {
	q.order = order.WithColumn(q.appendColumnPrefix("\"updated_at\""))
	return q
}

func (q groupSelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, offset, vs, err := q.where.ToSqlPg(0)
	if err != nil {
		return "", nil, err
	}

	tableName := "\"groups\""
	if q.tableAlias != "" {
		tableName = tableName + " AS " + q.tableAlias
		pcs := make([]string, 0, len(q.Columns))
		for _, column := range q.Columns {
			pcs = append(pcs, q.appendColumnPrefix(column))
		}
		columns = strings.Join(pcs, ", ")
	}
	query := "SELECT " + columns + " FROM " + tableName
	if len(q.joinClauses) > 0 {
		jc := strings.Join(q.joinClauses, " ")
		query += " " + jc
	}
	if wheres != "" {
		query += " WHERE" + wheres
	}
	if q.additionalWhereClause != nil {
		_query, _offset, _args := q.additionalWhereClause(offset)
		query += " " + _query
		if len(_args) > 0 {
			vs = append(vs, _args...)
		}
		offset = _offset
	}
	if len(q.groupByColumns) > 0 {
		query += " GROUP BY "
		gbcs := make([]string, 0, len(q.groupByColumns))
		for _, column := range q.groupByColumns {
			gbcs = append(gbcs, q.appendColumnPrefix(column))
		}
		query += strings.Join(gbcs, ", ")
	}
	if q.order != nil {
		_query, _ := q.order.OrderExprPg(offset)
		query += " ORDER BY " + _query
		vs = append(vs, q.order.Values()...)
	}
	if q.limit != nil {
		query += " LIMIT " + strconv.FormatUint(*q.limit, 10)
	}
	if q.offset != nil {
		query += " OFFSET " + strconv.FormatUint(*q.offset, 10)
	}

	if q.isForUpdate {
		query += " FOR UPDATE"
	}

	return query + ";", vs, nil
}

func (s Group) Select() groupSelectSQL {
	return NewGroupSQL().Select().ID(s.ID)
}
func (q groupSelectSQL) Single(db sqlla.DB) (Group, error) {
	q.Columns = groupAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return Group{}, err
	}

	row := db.QueryRow(query, args...)
	return q.Scan(row)
}

func (q groupSelectSQL) SingleContext(ctx context.Context, db sqlla.DB) (Group, error) {
	q.Columns = groupAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return Group{}, err
	}

	row := db.QueryRowContext(ctx, query, args...)
	return q.Scan(row)
}

func (q groupSelectSQL) All(db sqlla.DB) ([]Group, error) {
	rs := make([]Group, 0, 10)
	q.Columns = groupAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q groupSelectSQL) AllContext(ctx context.Context, db sqlla.DB) ([]Group, error) {
	rs := make([]Group, 0, 10)
	q.Columns = groupAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q groupSelectSQL) Scan(s sqlla.Scanner) (Group, error) {
	var row Group
	err := s.Scan(
		&row.ID,
		&row.Name,
		&row.LeaderAccountID,
		&row.SubLeaderAccountID,
		&row.ChildGroupID,
		&row.CreatedAt,
		&row.UpdatedAt,
	)
	return row, err
}

// IterContext returns iter.Seq2[Group, error] and closer.
//
// The returned Iter.Seq2 assembles and executes a query in the first iteration.
// Therefore, the first iteration may return an error in assembling or executing the query.
// Subsequent iterations read rows. Again, the read may return an error.
//
// closer is a function that closes the row reader object. Execution of this function is idempotent.
// Be sure to call it when you are done using iter.Seq2.
func (q groupSelectSQL) IterContext(ctx context.Context, db sqlla.DB) (func(func(Group, error) bool), func() error) {
	var rowClose func() error
	closer := func() error {
		if rowClose != nil {
			err := rowClose()
			rowClose = nil
			return err
		}
		return nil
	}

	q.Columns = groupAllColumns
	query, args, err := q.ToSql()
	return func(yield func(Group, error) bool) {
		if err != nil {
			var r Group
			yield(r, err)
			return
		}
		rows, err := db.QueryContext(ctx, query, args...)
		if err != nil {
			var r Group
			yield(r, err)
			return
		}
		rowClose = rows.Close
		for rows.Next() {
			r, err := q.Scan(rows)
			if !yield(r, err) {
				break
			}
		}
	}, closer
}

type groupUpdateSQL struct {
	groupSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q groupSQL) Update() groupUpdateSQL {
	return groupUpdateSQL{
		groupSQL: q,
		setMap:   sqlla.SetMap{},
	}
}

func (q groupUpdateSQL) SetID(v GroupID) groupUpdateSQL {
	q.setMap["\"id\""] = int64(v)
	return q
}

func (q groupUpdateSQL) WhereID(v GroupID, exprs ...sqlla.Operator) groupUpdateSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: "\"id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereIDIn(vs ...GroupID) groupUpdateSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) SetName(v string) groupUpdateSQL {
	q.setMap["\"name\""] = v
	return q
}

func (q groupUpdateSQL) WhereName(v string, exprs ...sqlla.Operator) groupUpdateSQL {
	where := sqlla.ExprValue[string]{Value: v, Op: sqlla.Operators(exprs), Column: "\"name\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereNameIn(vs ...string) groupUpdateSQL {
	where := sqlla.ExprMultiValue[string]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"name\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) SetLeaderAccountID(v AccountID) groupUpdateSQL {
	q.setMap["\"leader_account_id\""] = int64(v)
	return q
}

func (q groupUpdateSQL) WhereLeaderAccountID(v AccountID, exprs ...sqlla.Operator) groupUpdateSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: "\"leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereLeaderAccountIDIn(vs ...AccountID) groupUpdateSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) SetSubLeaderAccountID(v AccountID) groupUpdateSQL {
	q.setMap["\"sub_leader_account_id\""] = int64(v)
	return q
}

func (q groupUpdateSQL) SetSubLeaderAccountIDToNull() groupUpdateSQL {
	q.setMap["\"sub_leader_account_id\""] = sql.Null[int64]{Valid: false}
	return q
}

func (q groupUpdateSQL) WhereSubLeaderAccountID(v AccountID, exprs ...sqlla.Operator) groupUpdateSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{V: int64(v), Valid: true}, Op: sqlla.Operators(exprs), Column: "\"sub_leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereSubLeaderAccountIDIsNull() groupUpdateSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators([]sqlla.Operator{sqlla.OpEqual}), Column: "\"sub_leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereSubLeaderAccountIDIsNotNull() groupUpdateSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators([]sqlla.Operator{sqlla.OpNot}), Column: "\"sub_leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereSubLeaderAccountIDIn(vs ...AccountID) groupUpdateSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"sub_leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) SetChildGroupID(v GroupID) groupUpdateSQL {
	q.setMap["\"child_group_id\""] = int64(v)
	return q
}

func (q groupUpdateSQL) SetChildGroupIDToNull() groupUpdateSQL {
	q.setMap["\"child_group_id\""] = sql.Null[int64]{Valid: false}
	return q
}

func (q groupUpdateSQL) WhereChildGroupID(v GroupID, exprs ...sqlla.Operator) groupUpdateSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{V: int64(v), Valid: true}, Op: sqlla.Operators(exprs), Column: "\"child_group_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereChildGroupIDIsNull() groupUpdateSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators([]sqlla.Operator{sqlla.OpEqual}), Column: "\"child_group_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereChildGroupIDIsNotNull() groupUpdateSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators([]sqlla.Operator{sqlla.OpNot}), Column: "\"child_group_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereChildGroupIDIn(vs ...GroupID) groupUpdateSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"child_group_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) SetCreatedAt(v time.Time) groupUpdateSQL {
	q.setMap["\"created_at\""] = v
	return q
}

func (q groupUpdateSQL) WhereCreatedAt(v time.Time, exprs ...sqlla.Operator) groupUpdateSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: "\"created_at\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereCreatedAtIn(vs ...time.Time) groupUpdateSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"created_at\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) SetUpdatedAt(v time.Time) groupUpdateSQL {
	q.setMap["\"updated_at\""] = v
	return q
}

func (q groupUpdateSQL) WhereUpdatedAt(v time.Time, exprs ...sqlla.Operator) groupUpdateSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: "\"updated_at\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) WhereUpdatedAtIn(vs ...time.Time) groupUpdateSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"updated_at\""}
	q.where = append(q.where, where)
	return q
}

func (q groupUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Group{}
	if t, ok := s.(groupDefaultUpdateHooker); ok {
		q, err = t.DefaultUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	setColumns, offset, svs, err := q.setMap.ToUpdateSqlPg(0)
	if err != nil {
		return "", []interface{}{}, err
	}
	wheres, _, wvs, err := q.where.ToSqlPg(offset)
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "UPDATE " + "\"groups\"" + " SET" + setColumns
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", append(svs, wvs...), nil
}
func (s Group) Update() groupUpdateSQL {
	return NewGroupSQL().Update().WhereID(s.ID)
}

func (q groupUpdateSQL) Exec(db sqlla.DB) ([]Group, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	_, err = db.Exec(query, args...)
	if err != nil {
		return nil, err
	}
	qq := q.groupSQL

	return qq.Select().All(db)
}

func (q groupUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]Group, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	_, err = db.ExecContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	qq := q.groupSQL

	return qq.Select().AllContext(ctx, db)
}

type groupDefaultUpdateHooker interface {
	DefaultUpdateHook(groupUpdateSQL) (groupUpdateSQL, error)
}

type groupInsertSQL struct {
	groupSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q groupSQL) Insert() groupInsertSQL {
	return groupInsertSQL{
		groupSQL: q,
		setMap:   sqlla.SetMap{},
	}
}

func (q groupInsertSQL) ValueID(v GroupID) groupInsertSQL {
	q.setMap["\"id\""] = int64(v)
	return q
}

func (q groupInsertSQL) ValueName(v string) groupInsertSQL {
	q.setMap["\"name\""] = v
	return q
}

func (q groupInsertSQL) ValueLeaderAccountID(v AccountID) groupInsertSQL {
	q.setMap["\"leader_account_id\""] = int64(v)
	return q
}

func (q groupInsertSQL) ValueSubLeaderAccountID(v AccountID) groupInsertSQL {
	q.setMap["\"sub_leader_account_id\""] = int64(v)
	return q
}

func (q groupInsertSQL) ValueSubLeaderAccountIDIsNull() groupInsertSQL {
	q.setMap["\"sub_leader_account_id\""] = sql.Null[int64]{Valid: false}
	return q
}

func (q groupInsertSQL) ValueChildGroupID(v GroupID) groupInsertSQL {
	q.setMap["\"child_group_id\""] = int64(v)
	return q
}

func (q groupInsertSQL) ValueChildGroupIDIsNull() groupInsertSQL {
	q.setMap["\"child_group_id\""] = sql.Null[int64]{Valid: false}
	return q
}

func (q groupInsertSQL) ValueCreatedAt(v time.Time) groupInsertSQL {
	q.setMap["\"created_at\""] = v
	return q
}

func (q groupInsertSQL) ValueUpdatedAt(v time.Time) groupInsertSQL {
	q.setMap["\"updated_at\""] = v
	return q
}

func (q groupInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.groupInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + " RETURNING " + "\"id\"" + ";", vs, nil
}

func (q groupInsertSQL) groupInsertSQLToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Group{}
	if t, ok := s.(groupDefaultInsertHooker); ok {
		q, err = t.DefaultInsertHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	qs, _, vs, err := q.setMap.ToInsertSqlPg(0)
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "INSERT INTO " + "\"groups\"" + " " + qs

	return query, vs, nil
}

func (q groupInsertSQL) Exec(db sqlla.DB) (Group, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return Group{}, err
	}
	row := db.QueryRow(query, args...)
	var pk GroupID
	if err := row.Scan(&pk); err != nil {
		return Group{}, err
	}
	return NewGroupSQL().Select().ID(pk).Single(db)
}

func (q groupInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (Group, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return Group{}, err
	}
	row := db.QueryRowContext(ctx, query, args...)
	var pk GroupID
	if err := row.Scan(&pk); err != nil {
		return Group{}, err
	}
	return NewGroupSQL().Select().ID(pk).SingleContext(ctx, db)
}

func (q groupInsertSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type groupDefaultInsertHooker interface {
	DefaultInsertHook(groupInsertSQL) (groupInsertSQL, error)
}

type groupInsertSQLToSqler interface {
	groupInsertSQLToSql() (string, []interface{}, error)
}

type groupBulkInsertSQL struct {
	insertSQLs []groupInsertSQL
}

func (q groupSQL) BulkInsert() *groupBulkInsertSQL {
	return &groupBulkInsertSQL{
		insertSQLs: []groupInsertSQL{},
	}
}

func (q *groupBulkInsertSQL) Append(iqs ...groupInsertSQL) {
	q.insertSQLs = append(q.insertSQLs, iqs...)
}

func (q *groupBulkInsertSQL) groupInsertSQLToSql() (string, []interface{}, error) {
	if len(q.insertSQLs) == 0 {
		return "", []interface{}{}, fmt.Errorf("sqlla: This groupBulkInsertSQL's InsertSQL was empty")
	}
	iqs := make([]groupInsertSQL, len(q.insertSQLs))
	copy(iqs, q.insertSQLs)

	var s interface{} = Group{}
	if t, ok := s.(groupDefaultInsertHooker); ok {
		for i, iq := range iqs {
			var err error
			iq, err = t.DefaultInsertHook(iq)
			if err != nil {
				return "", []interface{}{}, err
			}
			iqs[i] = iq
		}
	}

	sms := make(sqlla.SetMaps, 0, len(q.insertSQLs))
	for _, iq := range q.insertSQLs {
		sms = append(sms, iq.setMap)
	}

	query, _, vs, err := sms.ToInsertSqlPg(0)
	if err != nil {
		return "", []interface{}{}, err
	}

	return "INSERT INTO " + "\"groups\"" + " " + query, vs, nil
}

func (q *groupBulkInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.groupInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + " RETURNING " + "\"id\"" + ";", vs, nil
}
func (q *groupBulkInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) ([]Group, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	pks := make([]GroupID, 0, len(q.insertSQLs))
	for rows.Next() {
		var pk GroupID
		if err := rows.Scan(&pk); err != nil {
			return nil, err
		}
		pks = append(pks, pk)
	}
	return NewGroupSQL().Select().IDIn(pks...).AllContext(ctx, db)
}
func (q *groupBulkInsertSQL) ExecContextWithoutSelect(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type groupDeleteSQL struct {
	groupSQL
}

func (q groupSQL) Delete() groupDeleteSQL {
	return groupDeleteSQL{
		q,
	}
}

func (q groupDeleteSQL) ID(v GroupID, exprs ...sqlla.Operator) groupDeleteSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: "\"id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) IDIn(vs ...GroupID) groupDeleteSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) Name(v string, exprs ...sqlla.Operator) groupDeleteSQL {
	where := sqlla.ExprValue[string]{Value: v, Op: sqlla.Operators(exprs), Column: "\"name\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) NameIn(vs ...string) groupDeleteSQL {
	where := sqlla.ExprMultiValue[string]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"name\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) LeaderAccountID(v AccountID, exprs ...sqlla.Operator) groupDeleteSQL {
	where := sqlla.ExprValue[int64]{Value: int64(v), Op: sqlla.Operators(exprs), Column: "\"leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) LeaderAccountIDIn(vs ...AccountID) groupDeleteSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) SubLeaderAccountID(v AccountID, exprs ...sqlla.Operator) groupDeleteSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{V: int64(v), Valid: true}, Op: sqlla.Operators(exprs), Column: "\"sub_leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) SubLeaderAccountIDIsNull() groupDeleteSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators{sqlla.OpEqual}, Column: "\"sub_leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) SubLeaderAccountIDIsNotNull() groupDeleteSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators{sqlla.OpNot}, Column: "\"sub_leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) SubLeaderAccountIDIn(vs ...AccountID) groupDeleteSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"sub_leader_account_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) ChildGroupID(v GroupID, exprs ...sqlla.Operator) groupDeleteSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{V: int64(v), Valid: true}, Op: sqlla.Operators(exprs), Column: "\"child_group_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) ChildGroupIDIsNull() groupDeleteSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators{sqlla.OpEqual}, Column: "\"child_group_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) ChildGroupIDIsNotNull() groupDeleteSQL {
	where := sqlla.ExprNull[int64]{Value: sql.Null[int64]{Valid: false}, Op: sqlla.Operators{sqlla.OpNot}, Column: "\"child_group_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) ChildGroupIDIn(vs ...GroupID) groupDeleteSQL {
	_vs := make([]int64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, int64(v))
	}
	where := sqlla.ExprMultiValue[int64]{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"child_group_id\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) CreatedAt(v time.Time, exprs ...sqlla.Operator) groupDeleteSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: "\"created_at\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) CreatedAtIn(vs ...time.Time) groupDeleteSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"created_at\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) UpdatedAt(v time.Time, exprs ...sqlla.Operator) groupDeleteSQL {
	where := sqlla.ExprValue[time.Time]{Value: v, Op: sqlla.Operators(exprs), Column: "\"updated_at\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) UpdatedAtIn(vs ...time.Time) groupDeleteSQL {
	where := sqlla.ExprMultiValue[time.Time]{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "\"updated_at\""}
	q.where = append(q.where, where)
	return q
}

func (q groupDeleteSQL) ToSql() (string, []interface{}, error) {
	wheres, _, vs, err := q.where.ToSqlPg(0)
	if err != nil {
		return "", nil, err
	}

	query := "DELETE FROM " + "\"groups\""
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", vs, nil
}

func (q groupDeleteSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q groupDeleteSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
func (s Group) Delete(db sqlla.DB) (sql.Result, error) {
	query, args, err := NewGroupSQL().Delete().ID(s.ID).ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (s Group) DeleteContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := NewGroupSQL().Delete().ID(s.ID).ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
