// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla - DO NOT EDIT.
package example

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"database/sql"
	"github.com/go-sql-driver/mysql"
	"time"

	"github.com/mackee/go-sqlla/v2"
)

type userItemDetailSQL struct {
	where sqlla.Where
}

func NewUserItemDetailSQL() userItemDetailSQL {
	q := userItemDetailSQL{}
	return q
}

var userItemDetailAllColumns = []string{
	"`ui_id`", "`ui_user_id`", "`ui_item_id`", "`ui_is_used`", "`ui_has_extension`", "`ui_used_at`", "`i_id`", "`i_name`", "`u_id`", "`u_name`", "`u_age`", "`u_rate`", "`u_icon_image`", "`u_created_at`", "`u_updated_at`",
}

type userItemDetailSelectSQL struct {
	userItemDetailSQL
	Columns     []string
	order       string
	limit       *uint64
	offset      *uint64
	tableAlias  string
	joinClauses []string

	additionalWhereClause     string
	additionalWhereClauseArgs []interface{}

	groupByColumns []string

	isForUpdate bool
}

func (q userItemDetailSQL) Select() userItemDetailSelectSQL {
	return userItemDetailSelectSQL{
		q,
		userItemDetailAllColumns,
		"",
		nil,
		nil,
		"",
		nil,
		"",
		nil,
		nil,
		false,
	}
}

func (q userItemDetailSelectSQL) Or(qs ...userItemDetailSelectSQL) userItemDetailSelectSQL {
	ws := make([]sqlla.Where, 0, len(qs))
	for _, q := range qs {
		ws = append(ws, q.where)
	}
	q.where = append(q.where, sqlla.ExprOr(ws))
	return q
}

func (q userItemDetailSelectSQL) Limit(l uint64) userItemDetailSelectSQL {
	q.limit = &l
	return q
}

func (q userItemDetailSelectSQL) Offset(o uint64) userItemDetailSelectSQL {
	q.offset = &o
	return q
}

func (q userItemDetailSelectSQL) ForUpdate() userItemDetailSelectSQL {
	q.isForUpdate = true
	return q
}

func (q userItemDetailSelectSQL) TableAlias(alias string) userItemDetailSelectSQL {
	q.tableAlias = "`" + alias + "`"
	return q
}

func (q userItemDetailSelectSQL) SetColumns(columns ...string) userItemDetailSelectSQL {
	q.Columns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(.`") {
			q.Columns = append(q.Columns, column)
		} else {
			q.Columns = append(q.Columns, "`"+column+"`")
		}
	}
	return q
}

func (q userItemDetailSelectSQL) JoinClause(clause string) userItemDetailSelectSQL {
	q.joinClauses = append(q.joinClauses, clause)
	return q
}

func (q userItemDetailSelectSQL) AdditionalWhereClause(clause string, args ...interface{}) userItemDetailSelectSQL {
	q.additionalWhereClause = clause
	q.additionalWhereClauseArgs = args
	return q
}

func (q userItemDetailSelectSQL) appendColumnPrefix(column string) string {
	if q.tableAlias == "" || strings.ContainsAny(column, "(.") {
		return column
	}
	return q.tableAlias + "." + column
}

func (q userItemDetailSelectSQL) GroupBy(columns ...string) userItemDetailSelectSQL {
	q.groupByColumns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(.`") {
			q.groupByColumns = append(q.groupByColumns, column)
		} else {
			q.groupByColumns = append(q.groupByColumns, "`"+column+"`")
		}
	}
	return q
}

func (q userItemDetailSelectSQL) UserItemId(v uint64, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: q.appendColumnPrefix("`ui_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserItemIdIn(vs ...uint64) userItemDetailSelectSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`ui_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserItemId(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`ui_id`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserItemUserId(v uint64, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: q.appendColumnPrefix("`ui_user_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserItemUserIdIn(vs ...uint64) userItemDetailSelectSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`ui_user_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserItemUserId(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`ui_user_id`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserItemItemId(v string, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`ui_item_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserItemItemIdIn(vs ...string) userItemDetailSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`ui_item_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserItemItemId(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`ui_item_id`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserItemIsUsed(v bool, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprBool{Value: v, Op: op, Column: q.appendColumnPrefix("`ui_is_used`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserItemIsUsedIn(vs ...bool) userItemDetailSelectSQL {
	where := sqlla.ExprMultiBool{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`ui_is_used`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserItemIsUsed(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`ui_is_used`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserItemHasExtension(v sql.NullBool, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullBool{Value: v, Op: op, Column: q.appendColumnPrefix("`ui_has_extension`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserItemHasExtensionIn(vs ...sql.NullBool) userItemDetailSelectSQL {
	where := sqlla.ExprMultiNullBool{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`ui_has_extension`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserItemHasExtension(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`ui_has_extension`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserItemUsedAt(v sql.NullTime, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullTime{Value: v, Op: op, Column: q.appendColumnPrefix("`ui_used_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserItemUsedAtIn(vs ...sql.NullTime) userItemDetailSelectSQL {
	where := sqlla.ExprMultiNullTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`ui_used_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserItemUsedAt(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`ui_used_at`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) ItemID(v ItemID, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: string(v), Op: op, Column: q.appendColumnPrefix("`i_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) ItemIDIn(vs ...ItemID) userItemDetailSelectSQL {
	_vs := make([]string, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, string(v))
	}
	where := sqlla.ExprMultiString{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`i_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByItemID(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`i_id`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) ItemName(v string, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`i_name`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) ItemNameIn(vs ...string) userItemDetailSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`i_name`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByItemName(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`i_name`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserId(v UserId, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: uint64(v), Op: op, Column: q.appendColumnPrefix("`u_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserIdIn(vs ...UserId) userItemDetailSelectSQL {
	_vs := make([]uint64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, uint64(v))
	}
	where := sqlla.ExprMultiUint64{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`u_id`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserId(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`u_id`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserName(v string, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`u_name`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserNameIn(vs ...string) userItemDetailSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`u_name`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserName(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`u_name`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserAge(v sql.NullInt64, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`u_age`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserAgeIn(vs ...sql.NullInt64) userItemDetailSelectSQL {
	where := sqlla.ExprMultiNullInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`u_age`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserAge(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`u_age`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserRate(v float64, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: q.appendColumnPrefix("`u_rate`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserRateIn(vs ...float64) userItemDetailSelectSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`u_rate`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserRate(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`u_rate`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserIconImage(v []byte, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprBytes{Value: v, Op: op, Column: q.appendColumnPrefix("`u_icon_image`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserIconImageIn(vs ...[]byte) userItemDetailSelectSQL {
	where := sqlla.ExprMultiBytes{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`u_icon_image`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserIconImage(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`u_icon_image`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserCreatedAt(v time.Time, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: q.appendColumnPrefix("`u_created_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserCreatedAtIn(vs ...time.Time) userItemDetailSelectSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`u_created_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserCreatedAt(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`u_created_at`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) UserUpdatedAt(v mysql.NullTime, exprs ...sqlla.Operator) userItemDetailSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprMysqlNullTime{Value: v, Op: op, Column: q.appendColumnPrefix("`u_updated_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) UserUpdatedAtIn(vs ...mysql.NullTime) userItemDetailSelectSQL {
	where := sqlla.ExprMultiMysqlNullTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`u_updated_at`")}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailSelectSQL) OrderByUserUpdatedAt(order sqlla.Order) userItemDetailSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`u_updated_at`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q userItemDetailSelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	tableName := "user_item_detail"
	if q.tableAlias != "" {
		tableName = tableName + " AS " + q.tableAlias
		pcs := make([]string, 0, len(q.Columns))
		for _, column := range q.Columns {
			pcs = append(pcs, q.appendColumnPrefix(column))
		}
		columns = strings.Join(pcs, ", ")
	}
	query := "SELECT " + columns + " FROM " + tableName
	if len(q.joinClauses) > 0 {
		jc := strings.Join(q.joinClauses, " ")
		query += " " + jc
	}
	if wheres != "" {
		query += " WHERE" + wheres
	}
	if q.additionalWhereClause != "" {
		query += " " + q.additionalWhereClause
		if len(q.additionalWhereClauseArgs) > 0 {
			vs = append(vs, q.additionalWhereClauseArgs...)
		}
	}
	if len(q.groupByColumns) > 0 {
		query += " GROUP BY "
		gbcs := make([]string, 0, len(q.groupByColumns))
		for _, column := range q.groupByColumns {
			gbcs = append(gbcs, q.appendColumnPrefix(column))
		}
		query += strings.Join(gbcs, ", ")
	}
	query += q.order
	if q.limit != nil {
		query += " LIMIT " + strconv.FormatUint(*q.limit, 10)
	}
	if q.offset != nil {
		query += " OFFSET " + strconv.FormatUint(*q.offset, 10)
	}

	if q.isForUpdate {
		query += " FOR UPDATE"
	}

	return query + ";", vs, nil
}

func (q userItemDetailSelectSQL) Single(db sqlla.DB) (UserItemDetail, error) {
	q.Columns = userItemDetailAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return UserItemDetail{}, err
	}

	row := db.QueryRow(query, args...)
	return q.Scan(row)
}

func (q userItemDetailSelectSQL) SingleContext(ctx context.Context, db sqlla.DB) (UserItemDetail, error) {
	q.Columns = userItemDetailAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return UserItemDetail{}, err
	}

	row := db.QueryRowContext(ctx, query, args...)
	return q.Scan(row)
}

func (q userItemDetailSelectSQL) All(db sqlla.DB) ([]UserItemDetail, error) {
	rs := make([]UserItemDetail, 0, 10)
	q.Columns = userItemDetailAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q userItemDetailSelectSQL) AllContext(ctx context.Context, db sqlla.DB) ([]UserItemDetail, error) {
	rs := make([]UserItemDetail, 0, 10)
	q.Columns = userItemDetailAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q userItemDetailSelectSQL) Scan(s sqlla.Scanner) (UserItemDetail, error) {
	var row UserItemDetail
	err := s.Scan(
		&row.UserItem.Id,
		&row.UserItem.UserId,
		&row.UserItem.ItemId,
		&row.UserItem.IsUsed,
		&row.UserItem.HasExtension,
		&row.UserItem.UsedAt,
		&row.Item.ID,
		&row.Item.Name,
		&row.User.Id,
		&row.User.Name,
		&row.User.Age,
		&row.User.Rate,
		&row.User.IconImage,
		&row.User.CreatedAt,
		&row.User.UpdatedAt,
	)
	return row, err
}

type userItemDetailUpdateSQL struct {
	userItemDetailSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q userItemDetailSQL) Update() userItemDetailUpdateSQL {
	return userItemDetailUpdateSQL{
		userItemDetailSQL: q,
		setMap:            sqlla.SetMap{},
	}
}

func (q userItemDetailUpdateSQL) SetUserItemId(v uint64) userItemDetailUpdateSQL {
	q.setMap["`ui_id`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemId(v uint64, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: "`ui_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemIdIn(vs ...uint64) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserItemUserId(v uint64) userItemDetailUpdateSQL {
	q.setMap["`ui_user_id`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemUserId(v uint64, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: "`ui_user_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemUserIdIn(vs ...uint64) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_user_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserItemItemId(v string) userItemDetailUpdateSQL {
	q.setMap["`ui_item_id`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemItemId(v string, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`ui_item_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemItemIdIn(vs ...string) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_item_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserItemIsUsed(v bool) userItemDetailUpdateSQL {
	q.setMap["`ui_is_used`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemIsUsed(v bool, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprBool{Value: v, Op: op, Column: "`ui_is_used`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemIsUsedIn(vs ...bool) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiBool{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_is_used`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserItemHasExtension(v sql.NullBool) userItemDetailUpdateSQL {
	q.setMap["`ui_has_extension`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemHasExtension(v sql.NullBool, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullBool{Value: v, Op: op, Column: "`ui_has_extension`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemHasExtensionIn(vs ...sql.NullBool) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiNullBool{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_has_extension`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserItemUsedAt(v sql.NullTime) userItemDetailUpdateSQL {
	q.setMap["`ui_used_at`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemUsedAt(v sql.NullTime, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullTime{Value: v, Op: op, Column: "`ui_used_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserItemUsedAtIn(vs ...sql.NullTime) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiNullTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_used_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetItemID(v ItemID) userItemDetailUpdateSQL {
	q.setMap["`i_id`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereItemID(v ItemID, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: string(v), Op: op, Column: "`i_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereItemIDIn(vs ...ItemID) userItemDetailUpdateSQL {
	_vs := make([]string, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, string(v))
	}
	where := sqlla.ExprMultiString{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`i_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetItemName(v string) userItemDetailUpdateSQL {
	q.setMap["`i_name`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereItemName(v string, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`i_name`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereItemNameIn(vs ...string) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`i_name`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserId(v UserId) userItemDetailUpdateSQL {
	q.setMap["`u_id`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserId(v UserId, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: uint64(v), Op: op, Column: "`u_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserIdIn(vs ...UserId) userItemDetailUpdateSQL {
	_vs := make([]uint64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, uint64(v))
	}
	where := sqlla.ExprMultiUint64{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserName(v string) userItemDetailUpdateSQL {
	q.setMap["`u_name`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserName(v string, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`u_name`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserNameIn(vs ...string) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_name`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserAge(v sql.NullInt64) userItemDetailUpdateSQL {
	q.setMap["`u_age`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserAge(v sql.NullInt64, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullInt64{Value: v, Op: op, Column: "`u_age`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserAgeIn(vs ...sql.NullInt64) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiNullInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_age`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserRate(v float64) userItemDetailUpdateSQL {
	q.setMap["`u_rate`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserRate(v float64, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: "`u_rate`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserRateIn(vs ...float64) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_rate`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserIconImage(v []byte) userItemDetailUpdateSQL {
	q.setMap["`u_icon_image`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserIconImage(v []byte, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprBytes{Value: v, Op: op, Column: "`u_icon_image`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserIconImageIn(vs ...[]byte) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiBytes{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_icon_image`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserCreatedAt(v time.Time) userItemDetailUpdateSQL {
	q.setMap["`u_created_at`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserCreatedAt(v time.Time, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: "`u_created_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserCreatedAtIn(vs ...time.Time) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_created_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) SetUserUpdatedAt(v mysql.NullTime) userItemDetailUpdateSQL {
	q.setMap["`u_updated_at`"] = v
	return q
}

func (q userItemDetailUpdateSQL) WhereUserUpdatedAt(v mysql.NullTime, exprs ...sqlla.Operator) userItemDetailUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprMysqlNullTime{Value: v, Op: op, Column: "`u_updated_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) WhereUserUpdatedAtIn(vs ...mysql.NullTime) userItemDetailUpdateSQL {
	where := sqlla.ExprMultiMysqlNullTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_updated_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = UserItemDetail{}
	if t, ok := s.(userItemDetailDefaultUpdateHooker); ok {
		q, err = t.DefaultUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	setColumns, svs, err := q.setMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	wheres, wvs, err := q.where.ToSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "UPDATE user_item_detail SET" + setColumns
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", append(svs, wvs...), nil
}
func (q userItemDetailUpdateSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q userItemDetailUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}

type userItemDetailDefaultUpdateHooker interface {
	DefaultUpdateHook(userItemDetailUpdateSQL) (userItemDetailUpdateSQL, error)
}

type userItemDetailInsertSQL struct {
	userItemDetailSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q userItemDetailSQL) Insert() userItemDetailInsertSQL {
	return userItemDetailInsertSQL{
		userItemDetailSQL: q,
		setMap:            sqlla.SetMap{},
	}
}

func (q userItemDetailInsertSQL) ValueUserItemId(v uint64) userItemDetailInsertSQL {
	q.setMap["`ui_id`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserItemUserId(v uint64) userItemDetailInsertSQL {
	q.setMap["`ui_user_id`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserItemItemId(v string) userItemDetailInsertSQL {
	q.setMap["`ui_item_id`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserItemIsUsed(v bool) userItemDetailInsertSQL {
	q.setMap["`ui_is_used`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserItemHasExtension(v sql.NullBool) userItemDetailInsertSQL {
	q.setMap["`ui_has_extension`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserItemUsedAt(v sql.NullTime) userItemDetailInsertSQL {
	q.setMap["`ui_used_at`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueItemID(v ItemID) userItemDetailInsertSQL {
	q.setMap["`i_id`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueItemName(v string) userItemDetailInsertSQL {
	q.setMap["`i_name`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserId(v UserId) userItemDetailInsertSQL {
	q.setMap["`u_id`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserName(v string) userItemDetailInsertSQL {
	q.setMap["`u_name`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserAge(v sql.NullInt64) userItemDetailInsertSQL {
	q.setMap["`u_age`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserRate(v float64) userItemDetailInsertSQL {
	q.setMap["`u_rate`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserIconImage(v []byte) userItemDetailInsertSQL {
	q.setMap["`u_icon_image`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserCreatedAt(v time.Time) userItemDetailInsertSQL {
	q.setMap["`u_created_at`"] = v
	return q
}

func (q userItemDetailInsertSQL) ValueUserUpdatedAt(v mysql.NullTime) userItemDetailInsertSQL {
	q.setMap["`u_updated_at`"] = v
	return q
}

func (q userItemDetailInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.userItemDetailInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q userItemDetailInsertSQL) userItemDetailInsertSQLToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = UserItemDetail{}
	if t, ok := s.(userItemDetailDefaultInsertHooker); ok {
		q, err = t.DefaultInsertHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	qs, vs, err := q.setMap.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "INSERT INTO user_item_detail " + qs

	return query, vs, nil
}

func (q userItemDetailInsertSQL) OnDuplicateKeyUpdate() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	return userItemDetailInsertOnDuplicateKeyUpdateSQL{
		insertSQL:               q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

func (q userItemDetailInsertSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.Exec(query, args...)
	return result, err
}

func (q userItemDetailInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type userItemDetailDefaultInsertHooker interface {
	DefaultInsertHook(userItemDetailInsertSQL) (userItemDetailInsertSQL, error)
}

type userItemDetailInsertSQLToSqler interface {
	userItemDetailInsertSQLToSql() (string, []interface{}, error)
}

type userItemDetailInsertOnDuplicateKeyUpdateSQL struct {
	insertSQL               userItemDetailInsertSQLToSqler
	onDuplicateKeyUpdateMap sqlla.SetMap
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserItemId(v uint64) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserItemId(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserItemId() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_id`"] = sqlla.SetMapRawValue("VALUES(`ui_id`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserItemUserId(v uint64) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_user_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserItemUserId(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_user_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserItemUserId() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_user_id`"] = sqlla.SetMapRawValue("VALUES(`ui_user_id`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserItemItemId(v string) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_item_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserItemItemId(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_item_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserItemItemId() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_item_id`"] = sqlla.SetMapRawValue("VALUES(`ui_item_id`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserItemIsUsed(v bool) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_is_used`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserItemIsUsed(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_is_used`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserItemIsUsed() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_is_used`"] = sqlla.SetMapRawValue("VALUES(`ui_is_used`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserItemHasExtension(v sql.NullBool) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_has_extension`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserItemHasExtension(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_has_extension`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserItemHasExtension() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_has_extension`"] = sqlla.SetMapRawValue("VALUES(`ui_has_extension`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserItemUsedAt(v sql.NullTime) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_used_at`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserItemUsedAt(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_used_at`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserItemUsedAt() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`ui_used_at`"] = sqlla.SetMapRawValue("VALUES(`ui_used_at`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateItemID(v ItemID) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`i_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateItemID(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`i_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateItemID() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`i_id`"] = sqlla.SetMapRawValue("VALUES(`i_id`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateItemName(v string) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`i_name`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateItemName(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`i_name`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateItemName() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`i_name`"] = sqlla.SetMapRawValue("VALUES(`i_name`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserId(v UserId) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserId(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_id`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserId() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_id`"] = sqlla.SetMapRawValue("VALUES(`u_id`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserName(v string) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_name`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserName(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_name`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserName() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_name`"] = sqlla.SetMapRawValue("VALUES(`u_name`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserAge(v sql.NullInt64) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_age`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserAge(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_age`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserAge() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_age`"] = sqlla.SetMapRawValue("VALUES(`u_age`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserRate(v float64) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_rate`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserRate(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_rate`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserRate() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_rate`"] = sqlla.SetMapRawValue("VALUES(`u_rate`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserIconImage(v []byte) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_icon_image`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserIconImage(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_icon_image`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserIconImage() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_icon_image`"] = sqlla.SetMapRawValue("VALUES(`u_icon_image`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserCreatedAt(v time.Time) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_created_at`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserCreatedAt(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_created_at`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserCreatedAt() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_created_at`"] = sqlla.SetMapRawValue("VALUES(`u_created_at`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateUserUpdatedAt(v mysql.NullTime) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_updated_at`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateUserUpdatedAt(v sqlla.SetMapRawValue) userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_updated_at`"] = v
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) SameOnUpdateUserUpdatedAt() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`u_updated_at`"] = sqlla.SetMapRawValue("VALUES(`u_updated_at`)")
	return q
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = UserItemDetail{}
	if t, ok := s.(userItemDetailDefaultInsertOnDuplicateKeyUpdateHooker); ok {
		q, err = t.DefaultInsertOnDuplicateKeyUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}

	query, vs, err := q.insertSQL.userItemDetailInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	os, ovs, err := q.onDuplicateKeyUpdateMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	query += " ON DUPLICATE KEY UPDATE" + os
	vs = append(vs, ovs...)

	return query + ";", vs, nil
}

func (q userItemDetailInsertOnDuplicateKeyUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type userItemDetailDefaultInsertOnDuplicateKeyUpdateHooker interface {
	DefaultInsertOnDuplicateKeyUpdateHook(userItemDetailInsertOnDuplicateKeyUpdateSQL) (userItemDetailInsertOnDuplicateKeyUpdateSQL, error)
}

type userItemDetailBulkInsertSQL struct {
	insertSQLs []userItemDetailInsertSQL
}

func (q userItemDetailSQL) BulkInsert() *userItemDetailBulkInsertSQL {
	return &userItemDetailBulkInsertSQL{
		insertSQLs: []userItemDetailInsertSQL{},
	}
}

func (q *userItemDetailBulkInsertSQL) Append(iqs ...userItemDetailInsertSQL) {
	q.insertSQLs = append(q.insertSQLs, iqs...)
}

func (q *userItemDetailBulkInsertSQL) userItemDetailInsertSQLToSql() (string, []interface{}, error) {
	if len(q.insertSQLs) == 0 {
		return "", []interface{}{}, fmt.Errorf("sqlla: This userItemDetailBulkInsertSQL's InsertSQL was empty")
	}
	iqs := make([]userItemDetailInsertSQL, len(q.insertSQLs))
	copy(iqs, q.insertSQLs)

	var s interface{} = UserItemDetail{}
	if t, ok := s.(userItemDetailDefaultInsertHooker); ok {
		for i, iq := range iqs {
			var err error
			iq, err = t.DefaultInsertHook(iq)
			if err != nil {
				return "", []interface{}{}, err
			}
			iqs[i] = iq
		}
	}

	sms := make(sqlla.SetMaps, 0, len(q.insertSQLs))
	for _, iq := range q.insertSQLs {
		sms = append(sms, iq.setMap)
	}

	query, vs, err := sms.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	return "INSERT INTO `user_item_detail` " + query, vs, nil
}

func (q *userItemDetailBulkInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.userItemDetailInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q *userItemDetailBulkInsertSQL) OnDuplicateKeyUpdate() userItemDetailInsertOnDuplicateKeyUpdateSQL {
	return userItemDetailInsertOnDuplicateKeyUpdateSQL{
		insertSQL:               q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

func (q *userItemDetailBulkInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type userItemDetailDeleteSQL struct {
	userItemDetailSQL
}

func (q userItemDetailSQL) Delete() userItemDetailDeleteSQL {
	return userItemDetailDeleteSQL{
		q,
	}
}

func (q userItemDetailDeleteSQL) UserItemId(v uint64, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: "`ui_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemIdIn(vs ...uint64) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemUserId(v uint64, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: v, Op: op, Column: "`ui_user_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemUserIdIn(vs ...uint64) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiUint64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_user_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemItemId(v string, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`ui_item_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemItemIdIn(vs ...string) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_item_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemIsUsed(v bool, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprBool{Value: v, Op: op, Column: "`ui_is_used`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemIsUsedIn(vs ...bool) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiBool{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_is_used`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemHasExtension(v sql.NullBool, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullBool{Value: v, Op: op, Column: "`ui_has_extension`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemHasExtensionIn(vs ...sql.NullBool) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiNullBool{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_has_extension`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemUsedAt(v sql.NullTime, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullTime{Value: v, Op: op, Column: "`ui_used_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserItemUsedAtIn(vs ...sql.NullTime) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiNullTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`ui_used_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) ItemID(v ItemID, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: string(v), Op: op, Column: "`i_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) ItemIDIn(vs ...ItemID) userItemDetailDeleteSQL {
	_vs := make([]string, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, string(v))
	}
	where := sqlla.ExprMultiString{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`i_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) ItemName(v string, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`i_name`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) ItemNameIn(vs ...string) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`i_name`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserId(v UserId, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprUint64{Value: uint64(v), Op: op, Column: "`u_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserIdIn(vs ...UserId) userItemDetailDeleteSQL {
	_vs := make([]uint64, 0, len(vs))
	for _, v := range vs {
		_vs = append(_vs, uint64(v))
	}
	where := sqlla.ExprMultiUint64{Values: _vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_id`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserName(v string, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`u_name`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserNameIn(vs ...string) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_name`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserAge(v sql.NullInt64, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprNullInt64{Value: v, Op: op, Column: "`u_age`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserAgeIn(vs ...sql.NullInt64) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiNullInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_age`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserRate(v float64, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: "`u_rate`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserRateIn(vs ...float64) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_rate`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserIconImage(v []byte, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprBytes{Value: v, Op: op, Column: "`u_icon_image`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserIconImageIn(vs ...[]byte) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiBytes{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_icon_image`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserCreatedAt(v time.Time, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprTime{Value: v, Op: op, Column: "`u_created_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserCreatedAtIn(vs ...time.Time) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_created_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserUpdatedAt(v mysql.NullTime, exprs ...sqlla.Operator) userItemDetailDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprMysqlNullTime{Value: v, Op: op, Column: "`u_updated_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) UserUpdatedAtIn(vs ...mysql.NullTime) userItemDetailDeleteSQL {
	where := sqlla.ExprMultiMysqlNullTime{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`u_updated_at`"}
	q.where = append(q.where, where)
	return q
}

func (q userItemDetailDeleteSQL) ToSql() (string, []interface{}, error) {
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	query := "DELETE FROM user_item_detail"
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", vs, nil
}

func (q userItemDetailDeleteSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q userItemDetailDeleteSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
