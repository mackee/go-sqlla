// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla. DO NOT EDIT.
package example

import (
	"context"
	"time"

	"github.com/mackee/go-sqlla/v2"
)

func (q userSelectSQL) CountContext(ctx context.Context, db sqlla.DB, column string) (int64, error) {
	query, args, err := q.SetColumns("COUNT(" + column + ")").ToSql()
	if err != nil {
		return 0, err
	}
	row := db.QueryRowContext(ctx, query, args...)
	var count int64
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

func (u User) DefaultInsertHook(_q userInsertSQL) (userInsertSQL, error) {
	now := time.Now()
	return _q.
		ValueCreatedAt(now), nil
}

func (u User) DefaultInsertOnDuplicateKeyUpdateHook(_q userInsertOnDuplicateKeyUpdateSQL) (userInsertOnDuplicateKeyUpdateSQL, error) {
	return _q.
		SameOnUpdateUpdatedAt(), nil
}

type Users []*User

func (u Users) Ids() []UserId {
	vs := make([]UserId, len(u))
	for _i := range u {
		vs[_i] = u[_i].Id
	}
	return vs
}

func (u Users) Names() []string {
	vs := make([]string, len(u))
	for _i := range u {
		vs[_i] = u[_i].Name
	}
	return vs
}

func (u Users) AssociateByIds() map[UserId]*User {
	_m := make(map[UserId]*User, len(u))
	for _, _v := range u {
		_m[_v.Id] = _v
	}
	return _m
}

func (u Users) GroupByNames() map[string]Users {
	_m := make(map[string]Users, len(u))
	for _, _v := range u {
		_m[_v.Name] = append(_m[_v.Name], _v)
	}
	return _m
}
